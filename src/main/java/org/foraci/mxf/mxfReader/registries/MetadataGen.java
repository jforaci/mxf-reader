package org.foraci.mxf.mxfReader.registries;

import org.foraci.mxf.mxfReader.UL;

public class MetadataGen {
private static void init1() {
UMIDVideo = Registry.add("UMIDVideo", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x10,0x00,0x00,0x00,0x00,});
UMIDVideo1 = Registry.add("UMIDVideo1", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x00,0x00,0x00,0x00,});
UMIDVideo2 = Registry.add("UMIDVideo2", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x12,0x00,0x00,0x00,0x00,});
UMIDVideo3 = Registry.add("UMIDVideo3", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x20,0x00,0x00,0x00,0x00,});
UMIDVideo4 = Registry.add("UMIDVideo4", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x21,0x00,0x00,0x00,0x00,});
UMIDVideo5 = Registry.add("UMIDVideo5", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x22,0x00,0x00,0x00,0x00,});
UMIDAudio = Registry.add("UMIDAudio", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x10,0x00,0x00,0x00,0x00,});
UMIDAudio1 = Registry.add("UMIDAudio1", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x11,0x00,0x00,0x00,0x00,});
UMIDAudio2 = Registry.add("UMIDAudio2", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x12,0x00,0x00,0x00,0x00,});
UMIDAudio3 = Registry.add("UMIDAudio3", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x20,0x00,0x00,0x00,0x00,});
UMIDAudio4 = Registry.add("UMIDAudio4", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x21,0x00,0x00,0x00,0x00,});
UMIDAudio5 = Registry.add("UMIDAudio5", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x22,0x00,0x00,0x00,0x00,});
UMIDData = Registry.add("UMIDData", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x10,0x00,0x00,0x00,0x00,});
UMIDData1 = Registry.add("UMIDData1", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x11,0x00,0x00,0x00,0x00,});
UMIDData2 = Registry.add("UMIDData2", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x12,0x00,0x00,0x00,0x00,});
UMIDData3 = Registry.add("UMIDData3", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x20,0x00,0x00,0x00,0x00,});
UMIDData4 = Registry.add("UMIDData4", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x21,0x00,0x00,0x00,0x00,});
UMIDData5 = Registry.add("UMIDData5", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x22,0x00,0x00,0x00,0x00,});
UMIDSystem = Registry.add("UMIDSystem", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x04,0x10,0x00,0x00,0x00,0x00,});
UMIDSystem1 = Registry.add("UMIDSystem1", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x04,0x11,0x00,0x00,0x00,0x00,});
UMIDSystem2 = Registry.add("UMIDSystem2", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x04,0x12,0x00,0x00,0x00,0x00,});
UMIDSystem3 = Registry.add("UMIDSystem3", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x04,0x20,0x00,0x00,0x00,0x00,});
UMIDSystem4 = Registry.add("UMIDSystem4", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x04,0x21,0x00,0x00,0x00,0x00,});
UMIDSystem5 = Registry.add("UMIDSystem5", new byte[] {0x06,0x0A,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x04,0x22,0x00,0x00,0x00,0x00,});
OrganizationID = Registry.add("OrganizationID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x10,0x01,0x00,0x00,0x00,0x00,});
OrganizationID1 = Registry.add("OrganizationID1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x01,0x10,0x01,0x01,0x00,0x00,0x00,});
OrganizationIDKind = Registry.add("OrganizationIDKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x01,0x10,0x02,0x00,0x00,0x00,0x00,});
OrganizationIDKind1 = Registry.add("OrganizationIDKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x01,0x10,0x02,0x01,0x00,0x00,0x00,});
UPID = Registry.add("UPID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x10,0x03,0x01,0x00,0x00,0x00,});
UPN = Registry.add("UPN", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x10,0x03,0x02,0x00,0x00,0x00,});
ProgramNumber = Registry.add("ProgramNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x01,0x10,0x03,0x03,0x00,0x00,0x00,});
IBTN = Registry.add("IBTN", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x10,0x04,0x01,0x01,0x00,0x00,});
ISAN = Registry.add("ISAN", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x01,0x00,0x00,0x00,0x00,});
ISBN = Registry.add("ISBN", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x02,0x00,0x00,0x00,0x00,});
ISSN = Registry.add("ISSN", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x03,0x00,0x00,0x00,0x00,});
ISWC = Registry.add("ISWC", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x04,0x00,0x00,0x00,0x00,});
ISMN = Registry.add("ISMN", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x05,0x00,0x00,0x00,0x00,});
ISCI = Registry.add("ISCI", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x06,0x00,0x00,0x00,0x00,});
ISRC = Registry.add("ISRC", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x07,0x00,0x00,0x00,0x00,});
ISRN = Registry.add("ISRN", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x08,0x00,0x00,0x00,0x00,});
ISBD = Registry.add("ISBD", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x09,0x00,0x00,0x00,0x00,});
ISTC = Registry.add("ISTC", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x11,0x0A,0x00,0x00,0x00,0x00,});
SICI = Registry.add("SICI", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x13,0x01,0x00,0x00,0x00,0x00,});
BICI = Registry.add("BICI", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x13,0x02,0x00,0x00,0x00,0x00,});
AICI = Registry.add("AICI", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x13,0x03,0x00,0x00,0x00,0x00,});
PII = Registry.add("PII", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x13,0x04,0x00,0x00,0x00,0x00,});
DOI = Registry.add("DOI", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x15,0x01,0x00,0x00,0x00,0x00,});
GUID = Registry.add("UID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x15,0x02,0x00,0x00,0x00,0x00,});
DefinitionObjectID = Registry.add("DefinitionObjectID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x01,0x15,0x03,0x00,0x00,0x00,0x00,});
GlobalNumber = Registry.add("GlobalNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x01,0x15,0x04,0x00,0x00,0x00,0x00,});
ClipID = Registry.add("ClipID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x01,0x15,0x08,0x00,0x00,0x00,0x00,});
ExtendedClipID = Registry.add("ExtendedClipID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x01,0x01,0x15,0x09,0x00,0x00,0x00,0x00,});
ClipIDArray = Registry.add("ClipIDArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x01,0x01,0x15,0x0A,0x00,0x00,0x00,0x00,});
ExtendedClipIDArray = Registry.add("ExtendedClipIDArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x01,0x01,0x15,0x0B,0x00,0x00,0x00,0x00,});
PackageID = Registry.add("PackageID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x15,0x10,0x00,0x00,0x00,0x00,});
CryptographicContextID = Registry.add("CryptographicContextID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x01,0x01,0x15,0x11,0x00,0x00,0x00,0x00,});
ParticipantID = Registry.add("ParticipantID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x01,0x15,0x40,0x01,0x01,0x00,0x00,});
ContactID = Registry.add("ContactID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x01,0x15,0x40,0x01,0x02,0x00,0x00,});
DeviceDesignation = Registry.add("DeviceDesignation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x20,0x01,0x00,0x00,0x00,0x00,});
DeviceModel = Registry.add("DeviceModel", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x20,0x03,0x00,0x00,0x00,0x00,});
DeviceSerialNumber = Registry.add("DeviceSerialNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x01,0x20,0x04,0x00,0x00,0x00,0x00,});
IEEEDeviceID = Registry.add("IEEEDeviceID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x01,0x20,0x05,0x00,0x00,0x00,0x00,});
DeviceIDKind = Registry.add("DeviceIDKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x01,0x20,0x07,0x00,0x00,0x00,0x00,});
DeviceKind = Registry.add("DeviceKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x01,0x20,0x08,0x00,0x00,0x00,0x00,});
DeviceKind1 = Registry.add("DeviceKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x01,0x20,0x08,0x01,0x00,0x00,0x00,});
DeviceKindCode = Registry.add("DeviceKindCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x01,0x20,0x08,0x02,0x00,0x00,0x00,});
DeviceAssetNumber = Registry.add("DeviceAssetNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x01,0x20,0x0C,0x00,0x00,0x00,0x00,});
PlatformDesignation = Registry.add("PlatformDesignation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x01,0x21,0x01,0x00,0x00,0x00,0x00,});
PlatformDesignation1 = Registry.add("PlatformDesignation1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x01,0x01,0x21,0x01,0x01,0x00,0x00,0x00,});
PlatformModel = Registry.add("PlatformModel", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x01,0x21,0x02,0x00,0x00,0x00,0x00,});
PlatformSerialNumber = Registry.add("PlatformSerialNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x01,0x21,0x03,0x00,0x00,0x00,0x00,});
URL = Registry.add("URL", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x02,0x01,0x01,0x00,0x00,0x00,0x00,});
URL1 = Registry.add("URL1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x02,0x01,0x01,0x01,0x00,0x00,0x00,});
PURL = Registry.add("PURL", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x02,0x01,0x02,0x00,0x00,0x00,0x00,});
URN = Registry.add("URN", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x02,0x01,0x03,0x00,0x00,0x00,0x00,});
DefaultNamespaceURI = Registry.add("DefaultNamespaceURI", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x02,0x01,0x04,0x00,0x00,0x00,0x00,});
DefaultNamespaceURI1 = Registry.add("DefaultNamespaceURI1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x02,0x01,0x04,0x01,0x00,0x00,0x00,});
NamespaceURI = Registry.add("NamespaceURI", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x02,0x01,0x05,0x00,0x00,0x00,0x00,});
NamespaceURI1 = Registry.add("NamespaceURI1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x02,0x01,0x05,0x01,0x00,0x00,0x00,});
NamespaceURIs = Registry.add("NamespaceURIs", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x02,0x01,0x06,0x00,0x00,0x00,0x00,});
NamespaceURIs1 = Registry.add("NamespaceURIs1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x02,0x01,0x06,0x01,0x00,0x00,0x00,});
SMPTEUL = Registry.add("SMPTEUL", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,});
IdentificationUL = Registry.add("IdentificationUL", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x02,0x02,0x02,0x00,0x00,0x00,0x00,});
OperationalPatternUL = Registry.add("OperationalPatternUL", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x02,0x02,0x03,0x00,0x00,0x00,0x00,});
EssenceContainerArray = Registry.add("EssenceContainerArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x02,0x02,0x10,0x01,0x01,0x00,0x00,});
EssenceContainers = Registry.add("EssenceContainers", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x02,0x02,0x10,0x02,0x01,0x00,0x00,});
DescriptiveMetadataSchemes = Registry.add("DescriptiveMetadataSchemes", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x02,0x02,0x10,0x02,0x02,0x00,0x00,});
TransmissionID = Registry.add("TransmissionID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x03,0x01,0x01,0x00,0x00,0x00,0x00,});
ArchiveID = Registry.add("ArchiveID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x03,0x01,0x02,0x00,0x00,0x00,0x00,});
ItemID = Registry.add("ItemID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x03,0x01,0x03,0x00,0x00,0x00,0x00,});
AccountingReferenceNumber = Registry.add("AccountingReferenceNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x03,0x01,0x04,0x00,0x00,0x00,0x00,});
TrafficID = Registry.add("TrafficID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x03,0x01,0x05,0x00,0x00,0x00,0x00,});
ProjectNumber = Registry.add("ProjectNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x03,0x01,0x06,0x00,0x00,0x00,0x00,});
LocalTargetID = Registry.add("LocalTargetID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x03,0x01,0x07,0x00,0x00,0x00,0x00,});
LocalTargetID1 = Registry.add("LocalTargetID1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x01,0x03,0x01,0x07,0x01,0x00,0x00,0x00,});
ProjectName = Registry.add("ProjectName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x03,0x01,0x08,0x00,0x00,0x00,0x00,});
ProjectName1 = Registry.add("ProjectName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x03,0x01,0x08,0x01,0x00,0x00,0x00,});
NITFLayerTargetID = Registry.add("NITFLayerTargetID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x01,0x03,0x01,0x09,0x00,0x00,0x00,0x00,});
NITFLayerTargetID1 = Registry.add("NITFLayerTargetID1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x01,0x03,0x01,0x09,0x01,0x00,0x00,0x00,});
ReelorRollNumber = Registry.add("ReelorRollNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x01,0x00,0x00,0x00,});
EdgeCodeHeader = Registry.add("EdgeCodeHeader", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x03,0x02,0x01,0x02,0x00,0x00,0x00,});
LocalTapeNumber = Registry.add("LocalTapeNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x01,0x00,0x00,0x00,});
MagneticDiskNumber = Registry.add("MagneticDiskNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x03,0x02,0x03,0x01,0x01,0x00,0x00,});
OpticalDiscNumber = Registry.add("OpticalDiscNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x03,0x02,0x03,0x02,0x01,0x00,0x00,});
LUID = Registry.add("LUID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x03,0x03,0x01,0x00,0x00,0x00,0x00,});
PackageName = Registry.add("PackageName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x01,0x03,0x03,0x02,0x00,0x00,0x00,0x00,});
PackageName1 = Registry.add("PackageName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x00,0x00,0x00,});
ChannelHandle = Registry.add("ChannelHandle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x03,0x04,0x01,0x00,0x00,0x00,0x00,});
StreamID = Registry.add("StreamID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x03,0x04,0x02,0x00,0x00,0x00,0x00,});
TransportStreamID = Registry.add("TransportStreamID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x03,0x04,0x03,0x00,0x00,0x00,0x00,});
EssenceStreamID = Registry.add("EssenceStreamID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x03,0x04,0x04,0x00,0x00,0x00,0x00,});
IndexStreamID = Registry.add("IndexStreamID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x03,0x04,0x05,0x00,0x00,0x00,0x00,});
RP217DataStreamPID = Registry.add("RP217DataStreamPID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x01,0x03,0x04,0x06,0x00,0x00,0x00,0x00,});
RP217VideoStreamPID = Registry.add("RP217VideoStreamPID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x01,0x03,0x04,0x07,0x00,0x00,0x00,0x00,});
OrganizationalProgramNumber = Registry.add("OrganizationalProgramNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x03,0x05,0x01,0x00,0x00,0x00,0x00,});
OrganizationalProgramNumber1 = Registry.add("OrganizationalProgramNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x03,0x05,0x01,0x01,0x00,0x00,0x00,});
ItemDesignatorID = Registry.add("ItemDesignatorID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x03,0x06,0x01,0x00,0x00,0x00,0x00,});
LocalTagValue = Registry.add("LocalTagValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x03,0x06,0x02,0x00,0x00,0x00,0x00,});
LocalTagUniqueID = Registry.add("LocalTagUniqueID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x03,0x06,0x03,0x00,0x00,0x00,0x00,});
HTMLDOCTYPE = Registry.add("HTMLDOCTYPE", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x03,0x06,0x04,0x00,0x00,0x00,0x00,});
HTMLDOCTYPE1 = Registry.add("HTMLDOCTYPE1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x03,0x06,0x04,0x01,0x00,0x00,0x00,});
NamespacePrefix = Registry.add("NamespacePrefix", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x03,0x06,0x05,0x00,0x00,0x00,0x00,});
NamespacePrefix1 = Registry.add("NamespacePrefix1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x03,0x06,0x05,0x01,0x00,0x00,0x00,});
NamespacePrefixes = Registry.add("NamespacePrefixes", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x03,0x06,0x06,0x00,0x00,0x00,0x00,});
NamespacePrefixes1 = Registry.add("NamespacePrefixes1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x01,0x03,0x06,0x06,0x01,0x00,0x00,0x00,});
LocalFilePath = Registry.add("LocalFilePath", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x04,0x01,0x01,0x00,0x00,0x00,0x00,});
LocalFilePath1 = Registry.add("LocalFilePath1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x04,0x01,0x01,0x01,0x00,0x00,0x00,});
PhysicalMediaLocation = Registry.add("PhysicalMediaLocation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x04,0x01,0x02,0x00,0x00,0x00,0x00,});
MediaLocation = Registry.add("MediaLocation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x04,0x01,0x02,0x01,0x00,0x00,0x00,});
TrackNumber = Registry.add("TrackNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x04,0x01,0x03,0x00,0x00,0x00,0x00,});
TrackNumberBatch = Registry.add("TrackNumberBatch", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x01,0x04,0x01,0x04,0x00,0x00,0x00,0x00,});
EdgeCode = Registry.add("EdgeCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x04,0x07,0x01,0x00,0x00,0x00,0x00,});
FrameCode = Registry.add("FrameCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x04,0x07,0x02,0x00,0x00,0x00,0x00,});
KeyCode = Registry.add("KeyCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x04,0x07,0x03,0x00,0x00,0x00,0x00,});
InkNumber = Registry.add("InkNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x04,0x07,0x04,0x00,0x00,0x00,0x00,});
EdgeCodeStart = Registry.add("EdgeCodeStart", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x04,0x09,0x01,0x00,0x00,0x00,0x00,});
KeyText = Registry.add("KeyText", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x04,0x10,0x01,0x00,0x00,0x00,0x00,});
KeyFrame = Registry.add("KeyFrame", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x04,0x10,0x02,0x00,0x00,0x00,0x00,});
KeySound = Registry.add("KeySound", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x04,0x10,0x03,0x00,0x00,0x00,0x00,});
KeyDataorProgram = Registry.add("KeyDataorProgram", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x04,0x10,0x04,0x00,0x00,0x00,0x00,});
TitleKind = Registry.add("TitleKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x05,0x01,0x00,0x00,0x00,0x00,0x00,});
TitleKind1 = Registry.add("TitleKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x05,0x01,0x01,0x00,0x00,0x00,0x00,});
MainTitle = Registry.add("MainTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x05,0x02,0x00,0x00,0x00,0x00,0x00,});
MainTitle1 = Registry.add("MainTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x05,0x02,0x01,0x00,0x00,0x00,0x00,});
SecondaryTitle = Registry.add("SecondaryTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x05,0x03,0x00,0x00,0x00,0x00,0x00,});
SecondaryTitle1 = Registry.add("SecondaryTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x05,0x03,0x01,0x00,0x00,0x00,0x00,});
SeriesNumber = Registry.add("SeriesNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x05,0x04,0x00,0x00,0x00,0x00,0x00,});
SeriesNumber1 = Registry.add("SeriesNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x05,0x04,0x01,0x00,0x00,0x00,0x00,});
EpisodeNumber = Registry.add("EpisodeNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x05,0x05,0x00,0x00,0x00,0x00,0x00,});
EpisodeNumber1 = Registry.add("EpisodeNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x05,0x05,0x01,0x00,0x00,0x00,0x00,});
SceneNumber = Registry.add("SceneNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x05,0x06,0x00,0x00,0x00,0x00,0x00,});
SceneNumber1 = Registry.add("SceneNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x05,0x06,0x01,0x00,0x00,0x00,0x00,});
TakeNumber = Registry.add("TakeNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x05,0x07,0x00,0x00,0x00,0x00,0x00,});
VersionTitle = Registry.add("VersionTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x05,0x08,0x00,0x00,0x00,0x00,0x00,});
VersionTitle1 = Registry.add("VersionTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x05,0x08,0x01,0x00,0x00,0x00,0x00,});
MissionID = Registry.add("MissionID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x05,0x09,0x00,0x00,0x00,0x00,0x00,});
MissionID1 = Registry.add("MissionID1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x05,0x09,0x01,0x00,0x00,0x00,0x00,});
WorkingTitle = Registry.add("WorkingTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x05,0x0A,0x00,0x00,0x00,0x00,0x00,});
WorkingTitle1 = Registry.add("WorkingTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x05,0x0A,0x01,0x00,0x00,0x00,0x00,});
OriginalTitle = Registry.add("OriginalTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x05,0x0B,0x00,0x00,0x00,0x00,0x00,});
OriginalTitle1 = Registry.add("OriginalTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x05,0x0B,0x01,0x00,0x00,0x00,0x00,});
ClipNumber = Registry.add("ClipNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x05,0x0C,0x00,0x00,0x00,0x00,0x00,});
ClipNumber1 = Registry.add("ClipNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x05,0x0C,0x01,0x00,0x00,0x00,0x00,});
BrandMainTitle = Registry.add("BrandMainTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x05,0x0D,0x00,0x00,0x00,0x00,0x00,});
BrandMainTitle1 = Registry.add("BrandMainTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x05,0x0D,0x01,0x00,0x00,0x00,0x00,});
BrandOriginalTitle = Registry.add("BrandOriginalTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x05,0x0E,0x00,0x00,0x00,0x00,0x00,});
BrandOriginalTitle1 = Registry.add("BrandOriginalTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x05,0x0E,0x01,0x00,0x00,0x00,0x00,});
FrameworkTitle = Registry.add("FrameworkTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x05,0x0F,0x00,0x00,0x00,0x00,0x00,});
FrameworkTitle1 = Registry.add("FrameworkTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x05,0x0F,0x01,0x00,0x00,0x00,0x00,});
TrackID = Registry.add("TrackID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x07,0x01,0x01,0x00,0x00,0x00,0x00,});
TrackName = Registry.add("TrackName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x07,0x01,0x02,0x00,0x00,0x00,0x00,});
TrackName1 = Registry.add("TrackName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x07,0x01,0x02,0x01,0x00,0x00,0x00,});
DefinitionObjectName = Registry.add("DefinitionObjectName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x07,0x01,0x02,0x03,0x00,0x00,0x00,});
DefinitionObjectName1 = Registry.add("DefinitionObjectName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x07,0x01,0x02,0x03,0x01,0x00,0x00,});
ContentPackageMetadataLink = Registry.add("ContentPackageMetadataLink", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x07,0x01,0x03,0x00,0x00,0x00,0x00,});
deprecatedDefinedName = Registry.add("deprecatedDefinedName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x07,0x01,0x04,0x00,0x00,0x00,0x00,});
deprecatedDefinedName1 = Registry.add("deprecatedDefinedName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x07,0x01,0x04,0x01,0x00,0x00,0x00,});
DescriptiveMetadataTrackIDs = Registry.add("DescriptiveMetadataTrackIDs", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x07,0x01,0x05,0x00,0x00,0x00,0x00,});
SourceTrackIDs = Registry.add("SourceTrackIDs", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x07,0x01,0x06,0x00,0x00,0x00,0x00,});
ShotTrackIDs = Registry.add("ShotTrackIDs", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x01,0x07,0x01,0x07,0x00,0x00,0x00,0x00,});
IdentifierKind = Registry.add("IdentifierKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x08,0x01,0x00,0x00,0x00,0x00,0x00,});
IdentifierValue = Registry.add("IdentifierValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x08,0x02,0x00,0x00,0x00,0x00,0x00,});
DeviceManufacturerName = Registry.add("DeviceManufacturerName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x0A,0x01,0x01,0x01,0x00,0x00,0x00,});
DeviceManufacturerName1 = Registry.add("DeviceManufacturerName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x0A,0x01,0x01,0x01,0x01,0x00,0x00,});
ManufacturerID = Registry.add("ManufacturerID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x0A,0x01,0x01,0x03,0x00,0x00,0x00,});
IEEEManufacturerID = Registry.add("IEEEManufacturerID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x0A,0x01,0x02,0x00,0x00,0x00,0x00,});
deprecatedAAFManufacturerID = Registry.add("deprecatedAAFManufacturerID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x01,0x0A,0x01,0x03,0x00,0x00,0x00,0x00,});
OrganizationCode = Registry.add("OrganizationCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x0A,0x02,0x01,0x00,0x00,0x00,0x00,});
OrganizationCode1 = Registry.add("OrganizationCode1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x01,0x0A,0x02,0x01,0x01,0x00,0x00,0x00,});
CISACLegalEntityID = Registry.add("CISACLegalEntityID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x10,0x01,0x01,0x00,0x00,0x00,0x00,});
AGICOAID = Registry.add("AGICOAID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x01,0x10,0x02,0x01,0x00,0x00,0x00,0x00,});
RecordingLabelName = Registry.add("RecordingLabelName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x10,0x03,0x01,0x00,0x00,0x00,0x00,});
RecordingLabelName1 = Registry.add("RecordingLabelName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x10,0x03,0x01,0x01,0x00,0x00,0x00,});
CollectionName = Registry.add("CollectionName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x10,0x03,0x02,0x00,0x00,0x00,0x00,});
CollectionName1 = Registry.add("CollectionName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x10,0x03,0x02,0x01,0x00,0x00,0x00,});
OriginCode = Registry.add("OriginCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x10,0x03,0x03,0x00,0x00,0x00,0x00,});
MainCatalogNumber = Registry.add("MainCatalogNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x10,0x03,0x04,0x00,0x00,0x00,0x00,});
CatalogPrefixNumber = Registry.add("CatalogPrefixNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x10,0x03,0x05,0x00,0x00,0x00,0x00,});
SideNumber = Registry.add("SideNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x10,0x03,0x06,0x00,0x00,0x00,0x00,});
RecordedTrackNumber = Registry.add("RecordedTrackNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x01,0x10,0x03,0x07,0x00,0x00,0x00,0x00,});
SourceOrganization = Registry.add("SourceOrganization", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,});
SourceOrganization1 = Registry.add("SourceOrganization1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x01,0x01,0x01,0x00,0x00,0x00,0x00,});
SupplyContractNumber = Registry.add("SupplyContractNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x01,0x02,0x00,0x00,0x00,0x00,0x00,});
OriginalProducerName = Registry.add("OriginalProducerName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x01,0x03,0x00,0x00,0x00,0x00,0x00,});
OriginalProducerName1 = Registry.add("OriginalProducerName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x01,0x03,0x01,0x00,0x00,0x00,0x00,});
SupplyingDepartmentName = Registry.add("SupplyingDepartmentName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x02,0x01,0x04,0x00,0x00,0x00,0x00,0x00,});
SupplierIdentificationKind = Registry.add("SupplierIdentificationKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x01,0x05,0x00,0x00,0x00,0x00,0x00,});
SupplierIdentificationValue = Registry.add("SupplierIdentificationValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x01,0x06,0x00,0x00,0x00,0x00,0x00,});
SupplierAccountNumber = Registry.add("SupplierAccountNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x01,0x07,0x00,0x00,0x00,0x00,0x00,});
SupplierAccountName = Registry.add("SupplierAccountName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x01,0x08,0x00,0x00,0x00,0x00,0x00,});
SupplierAccountName1 = Registry.add("SupplierAccountName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x01,0x08,0x01,0x00,0x00,0x00,0x00,});
TotalEpisodeCount = Registry.add("TotalEpisodeCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,});
SeriesinaSeriesGroupCount = Registry.add("SeriesinaSeriesGroupCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x00,});
ProgrammingGroupKind = Registry.add("ProgrammingGroupKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x02,0x03,0x00,0x00,0x00,0x00,0x00,});
ProgrammingGroupKind1 = Registry.add("ProgrammingGroupKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x02,0x03,0x01,0x00,0x00,0x00,0x00,});
EpisodeStartNumber = Registry.add("EpisodeStartNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,});
EpisodeEndNumber = Registry.add("EpisodeEndNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x02,0x05,0x00,0x00,0x00,0x00,0x00,});
ProgrammingGroupTitle = Registry.add("ProgrammingGroupTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,});
ProgrammingGroupTitle1 = Registry.add("ProgrammingGroupTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x02,0x06,0x01,0x00,0x00,0x00,0x00,});
PurchasingOrganizationName = Registry.add("PurchasingOrganizationName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x03,0x01,0x00,0x00,0x00,0x00,0x00,});
SalesContractNumber = Registry.add("SalesContractNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x03,0x02,0x00,0x00,0x00,0x00,0x00,});
PurchasingDepartment = Registry.add("PurchasingDepartment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x03,0x04,0x00,0x00,0x00,0x00,0x00,});
PurchaserIdentificationKind = Registry.add("PurchaserIdentificationKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x03,0x05,0x00,0x00,0x00,0x00,0x00,});
PurchaserIdentificationValue = Registry.add("PurchaserIdentificationValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x03,0x06,0x00,0x00,0x00,0x00,0x00,});
PurchaserAccountNumber = Registry.add("PurchaserAccountNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x03,0x07,0x00,0x00,0x00,0x00,0x00,});
PurchaserAccountName = Registry.add("PurchaserAccountName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x03,0x08,0x00,0x00,0x00,0x00,0x00,});
PurchaserAccountName1 = Registry.add("PurchaserAccountName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x03,0x08,0x01,0x00,0x00,0x00,0x00,});
ContractType = Registry.add("ContractType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x04,0x01,0x00,0x00,0x00,0x00,0x00,});
ContractTypeCode = Registry.add("ContractTypeCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x04,0x01,0x01,0x00,0x00,0x00,0x00,});
ContractType1 = Registry.add("ContractType1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x04,0x01,0x02,0x00,0x00,0x00,0x00,});
ContractClauseDescription = Registry.add("ContractClauseDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x04,0x02,0x00,0x00,0x00,0x00,0x00,});
ContractClauseDescription1 = Registry.add("ContractClauseDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x04,0x02,0x01,0x00,0x00,0x00,0x00,});
ContractLineCode = Registry.add("ContractLineCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x04,0x03,0x00,0x00,0x00,0x00,0x00,});
ContractLineName = Registry.add("ContractLineName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x04,0x03,0x01,0x00,0x00,0x00,0x00,});
ContractLineName1 = Registry.add("ContractLineName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x04,0x03,0x02,0x00,0x00,0x00,0x00,});
ContractTermsofBusiness = Registry.add("ContractTermsofBusiness", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,});
ContractTermsofBusiness1 = Registry.add("ContractTermsofBusiness1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x04,0x04,0x01,0x00,0x00,0x00,0x00,});
ContractInstallmentPercentage = Registry.add("ContractInstallmentPercentage", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x04,0x05,0x00,0x00,0x00,0x00,0x00,});
Jurisdiction = Registry.add("Jurisdiction", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x04,0x06,0x00,0x00,0x00,0x00,0x00,});
Jurisdiction1 = Registry.add("Jurisdiction1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x04,0x06,0x01,0x00,0x00,0x00,0x00,});
CopyrightStatus = Registry.add("CopyrightStatus", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x05,0x01,0x01,0x00,0x00,0x00,0x00,});
CopyrightStatus1 = Registry.add("CopyrightStatus1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x05,0x01,0x01,0x01,0x00,0x00,0x00,});
CopyrightOwnerName = Registry.add("CopyrightOwnerName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x05,0x01,0x02,0x00,0x00,0x00,0x00,});
CopyrightOwnerName1 = Registry.add("CopyrightOwnerName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x05,0x01,0x02,0x01,0x00,0x00,0x00,});
IntellectualPropertyDescription = Registry.add("IntellectualPropertyDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x05,0x02,0x01,0x00,0x00,0x00,0x00,});
IntellectualPropertyDescription1 = Registry.add("IntellectualPropertyDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x05,0x02,0x01,0x01,0x00,0x00,0x00,});
IntellectualPropertyRights = Registry.add("IntellectualPropertyRights", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x05,0x02,0x02,0x00,0x00,0x00,0x00,});
IntellectualPropertyRights1 = Registry.add("IntellectualPropertyRights1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x05,0x02,0x02,0x01,0x00,0x00,0x00,});
Rightsholder = Registry.add("Rightsholder", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x05,0x03,0x01,0x00,0x00,0x00,0x00,});
Rightsholder1 = Registry.add("Rightsholder1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x05,0x03,0x01,0x01,0x00,0x00,0x00,});
RightsManagementAuthority = Registry.add("RightsManagementAuthority", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x05,0x03,0x02,0x00,0x00,0x00,0x00,});
RightsManagementAuthority1 = Registry.add("RightsManagementAuthority1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x05,0x03,0x02,0x01,0x00,0x00,0x00,});
InterestedPartyName = Registry.add("InterestedPartyName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x05,0x03,0x03,0x00,0x00,0x00,0x00,});
MaximumUseCount = Registry.add("MaximumUseCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x05,0x04,0x01,0x00,0x00,0x00,0x00,});
LicenseOptionsDescription = Registry.add("LicenseOptionsDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x05,0x04,0x02,0x00,0x00,0x00,0x00,});
RightsConditionDescription = Registry.add("RightsConditionDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x05,0x04,0x03,0x00,0x00,0x00,0x00,});
RightsConditionDescription1 = Registry.add("RightsConditionDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x05,0x04,0x03,0x01,0x00,0x00,0x00,});
RightsComment = Registry.add("RightsComment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x02,0x05,0x04,0x04,0x00,0x00,0x00,0x00,});
RightsComment1 = Registry.add("RightsComment1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x02,0x05,0x04,0x04,0x01,0x00,0x00,0x00,});
CurrencyCode = Registry.add("CurrencyCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x00,0x00,0x00,0x00,});
CurrencyName = Registry.add("CurrencyName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x06,0x01,0x01,0x01,0x00,0x00,0x00,});
TotalCurrencyAmount = Registry.add("TotalCurrencyAmount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x06,0x01,0x02,0x00,0x00,0x00,0x00,});
InstallmentNumber = Registry.add("InstallmentNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x06,0x01,0x03,0x00,0x00,0x00,0x00,});
RoyaltyPaymentInformation = Registry.add("RoyaltyPaymentInformation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x06,0x02,0x01,0x00,0x00,0x00,0x00,});
TotalPayment = Registry.add("TotalPayment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x06,0x02,0x02,0x00,0x00,0x00,0x00,});
PayeeAccountName = Registry.add("PayeeAccountName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x06,0x02,0x03,0x00,0x00,0x00,0x00,});
PayeeAccountNumber = Registry.add("PayeeAccountNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x06,0x02,0x04,0x00,0x00,0x00,0x00,});
PayeeAccountSortCode = Registry.add("PayeeAccountSortCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x06,0x02,0x05,0x00,0x00,0x00,0x00,});
RoyaltyIncomeInformation = Registry.add("RoyaltyIncomeInformation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x06,0x03,0x01,0x00,0x00,0x00,0x00,});
TotalIncome = Registry.add("TotalIncome", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x06,0x03,0x02,0x00,0x00,0x00,0x00,});
PayerAccountName = Registry.add("PayerAccountName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x06,0x03,0x03,0x00,0x00,0x00,0x00,});
PayerAccountNumber = Registry.add("PayerAccountNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x06,0x03,0x04,0x00,0x00,0x00,0x00,});
PayerAccountSortCode = Registry.add("PayerAccountSortCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x06,0x03,0x05,0x00,0x00,0x00,0x00,});
RestrictionsonUse = Registry.add("RestrictionsonUse", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x07,0x01,0x00,0x00,0x00,0x00,0x00,});
ExCCIData = Registry.add("ExCCIData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x07,0x02,0x00,0x00,0x00,0x00,0x00,});
Username = Registry.add("Username", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x08,0x01,0x01,0x00,0x00,0x00,0x00,});
Username1 = Registry.add("Username1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x08,0x01,0x01,0x01,0x00,0x00,0x00,});
Password = Registry.add("Password", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x08,0x01,0x02,0x00,0x00,0x00,0x00,});
Password1 = Registry.add("Password1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x08,0x01,0x02,0x01,0x00,0x00,0x00,});
SecurityClassification = Registry.add("SecurityClassification", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x08,0x02,0x01,0x00,0x00,0x00,0x00,});
SecurityClassification1 = Registry.add("SecurityClassification1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x08,0x02,0x01,0x01,0x00,0x00,0x00,});
SecurityClassificationCaveats = Registry.add("SecurityClassificationCaveats", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x08,0x02,0x02,0x00,0x00,0x00,0x00,});
SecurityClassificationCaveats1 = Registry.add("SecurityClassificationCaveats1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x08,0x02,0x02,0x01,0x00,0x00,0x00,});
ClassifiedBy = Registry.add("ClassifiedBy", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x08,0x02,0x03,0x00,0x00,0x00,0x00,});
ClassificationReason = Registry.add("ClassificationReason", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x08,0x02,0x04,0x00,0x00,0x00,0x00,});
DeclassificationDate = Registry.add("DeclassificationDate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x08,0x02,0x05,0x00,0x00,0x00,0x00,});
DerivedFrom = Registry.add("DerivedFrom", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x08,0x02,0x06,0x00,0x00,0x00,0x00,});
ClassificationComment = Registry.add("ClassificationComment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x08,0x02,0x07,0x00,0x00,0x00,0x00,});
ClassificationComment1 = Registry.add("ClassificationComment1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x08,0x02,0x07,0x01,0x00,0x00,0x00,});
ClassificationandMarkingSystem = Registry.add("ClassificationandMarkingSystem", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x08,0x02,0x08,0x00,0x00,0x00,0x00,});
ScramblingKeyKind = Registry.add("ScramblingKeyKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x09,0x01,0x01,0x01,0x00,0x00,0x00,});
ScramblingKeyValue = Registry.add("ScramblingKeyValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x09,0x01,0x01,0x02,0x00,0x00,0x00,});
CipherAlgorithm = Registry.add("CipherAlgorithm", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x09,0x03,0x01,0x01,0x00,0x00,0x00,});
CryptographicKeyID = Registry.add("CryptographicKeyID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x09,0x03,0x01,0x02,0x00,0x00,0x00,});
EncryptedSourceValue = Registry.add("EncryptedSourceValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x09,0x03,0x01,0x03,0x00,0x00,0x00,});
MICAlgorithm = Registry.add("MICAlgorithm", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x09,0x03,0x02,0x01,0x00,0x00,0x00,});
MIC = Registry.add("MIC", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x02,0x09,0x03,0x02,0x02,0x00,0x00,0x00,});
IdentifierIssuingAuthority = Registry.add("IdentifierIssuingAuthority", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x0A,0x01,0x00,0x00,0x00,0x00,0x00,});
IdentifierIssuingAuthority1 = Registry.add("IdentifierIssuingAuthority1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x0A,0x01,0x01,0x00,0x00,0x00,0x00,});
BroadcastOrganizationName = Registry.add("BroadcastOrganizationName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x10,0x01,0x01,0x01,0x00,0x00,0x00,});
BroadcastOrganizationName1 = Registry.add("BroadcastOrganizationName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x10,0x01,0x01,0x01,0x01,0x00,0x00,});
BroadcastChannel = Registry.add("BroadcastChannel", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x10,0x01,0x01,0x02,0x00,0x00,0x00,});
BroadcastServiceName = Registry.add("BroadcastServiceName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x10,0x01,0x01,0x02,0x01,0x00,0x00,});
BroadcastMediumKind = Registry.add("BroadcastMediumKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x10,0x01,0x01,0x03,0x00,0x00,0x00,});
BroadcastMediumCode = Registry.add("BroadcastMediumCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x10,0x01,0x01,0x03,0x02,0x00,0x00,});
BroadcastRegion = Registry.add("BroadcastRegion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x10,0x01,0x01,0x04,0x01,0x00,0x00,});
BroadcastRegion1 = Registry.add("BroadcastRegion1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x10,0x01,0x01,0x05,0x00,0x00,0x00,});
PublishingOrganizationName = Registry.add("PublishingOrganizationName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x10,0x02,0x01,0x01,0x00,0x00,0x00,});
PublishingOrganizationName1 = Registry.add("PublishingOrganizationName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x10,0x02,0x01,0x01,0x01,0x00,0x00,});
PublishingServiceName = Registry.add("PublishingServiceName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x10,0x02,0x01,0x02,0x00,0x00,0x00,});
PublishingServiceName1 = Registry.add("PublishingServiceName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x10,0x02,0x01,0x02,0x01,0x00,0x00,});
PublishingMediumName = Registry.add("PublishingMediumName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x10,0x02,0x01,0x03,0x00,0x00,0x00,});
PublishingMediumName1 = Registry.add("PublishingMediumName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x10,0x02,0x01,0x03,0x01,0x00,0x00,});
PublishingRegionName = Registry.add("PublishingRegionName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x10,0x02,0x01,0x04,0x00,0x00,0x00,});
PublishingRegionName1 = Registry.add("PublishingRegionName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x10,0x02,0x01,0x04,0x01,0x00,0x00,});
FirstBroadcastFlag = Registry.add("FirstBroadcastFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x20,0x01,0x01,0x00,0x00,0x00,0x00,});
CurrentRepeatNumber = Registry.add("CurrentRepeatNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x20,0x02,0x01,0x00,0x00,0x00,0x00,});
PreviousRepeatNumber = Registry.add("PreviousRepeatNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x20,0x02,0x02,0x00,0x00,0x00,0x00,});
AudienceRating = Registry.add("AudienceRating", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x20,0x03,0x01,0x00,0x00,0x00,0x00,});
AudienceReach = Registry.add("AudienceReach", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x20,0x03,0x02,0x00,0x00,0x00,0x00,});
AudienceShare = Registry.add("AudienceShare", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x02,0x20,0x03,0x03,0x00,0x00,0x00,0x00,});
AudienceAppreciation = Registry.add("AudienceAppreciation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x02,0x20,0x03,0x04,0x00,0x00,0x00,0x00,});
NatureofPersonalityIndividualorGroup = Registry.add("NatureofPersonalityIndividualorGroup", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x01,0x01,0x00,0x00,0x00,0x00,});
NatureofPersonalityIndividualorGroup1 = Registry.add("NatureofPersonalityIndividualorGroup1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x01,0x01,0x01,0x00,0x00,0x00,});
ContributionStatus = Registry.add("ContributionStatus", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x01,0x02,0x01,0x00,0x00,0x00,});
ContributionStatus1 = Registry.add("ContributionStatus1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x01,0x02,0x01,0x01,0x00,0x00,});
SupportorAdministrationStatus = Registry.add("SupportorAdministrationStatus", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x01,0x03,0x01,0x00,0x00,0x00,});
SupportorAdministrationStatus1 = Registry.add("SupportorAdministrationStatus1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x01,0x03,0x01,0x01,0x00,0x00,});
OrganizationKind = Registry.add("OrganizationKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x02,0x01,0x00,0x00,0x00,0x00,});
OrganizationKind1 = Registry.add("OrganizationKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x02,0x01,0x01,0x00,0x00,0x00,});
ProductionOrganizationRole = Registry.add("ProductionOrganizationRole", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x02,0x02,0x01,0x00,0x00,0x00,});
ProductionOrganizationRole1 = Registry.add("ProductionOrganizationRole1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x02,0x02,0x01,0x01,0x00,0x00,});
SupportOrganizationRole = Registry.add("SupportOrganizationRole", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x02,0x03,0x01,0x00,0x00,0x00,});
SupportOrganizationRole1 = Registry.add("SupportOrganizationRole1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x02,0x03,0x01,0x01,0x00,0x00,});
JobFunctionName = Registry.add("JobFunctionName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x05,0x01,0x00,0x00,0x00,0x00,});
JobFunctionName1 = Registry.add("JobFunctionName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x05,0x01,0x01,0x00,0x00,0x00,});
JobFunctionCode = Registry.add("JobFunctionCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x05,0x01,0x02,0x00,0x00,0x00,});
RoleName = Registry.add("RoleName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x05,0x02,0x00,0x00,0x00,0x00,});
RoleName1 = Registry.add("RoleName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x05,0x02,0x01,0x00,0x00,0x00,});
JobTitle = Registry.add("JobTitle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x05,0x03,0x00,0x00,0x00,0x00,});
JobTitle1 = Registry.add("JobTitle1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x05,0x03,0x01,0x00,0x00,0x00,});
ContactKind = Registry.add("ContactKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x01,0x00,0x00,0x00,0x00,});
ContactKind1 = Registry.add("ContactKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x01,0x01,0x00,0x00,0x00,});
ContactDepartmentName = Registry.add("ContactDepartmentName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x02,0x00,0x00,0x00,0x00,});
ContactDepartmentName1 = Registry.add("ContactDepartmentName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x02,0x01,0x00,0x00,0x00,});
FamilyName = Registry.add("FamilyName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x03,0x01,0x01,0x00,0x00,});
FamilyName1 = Registry.add("FamilyName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x01,0x01,0x01,0x00,});
FirstGivenName = Registry.add("FirstGivenName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x03,0x01,0x02,0x00,0x00,});
FirstGivenName1 = Registry.add("FirstGivenName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x01,0x02,0x01,0x00,});
SecondGivenName = Registry.add("SecondGivenName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x03,0x01,0x03,0x00,0x00,});
SecondGivenName1 = Registry.add("SecondGivenName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x01,0x03,0x01,0x00,});
ThirdGivenName = Registry.add("ThirdGivenName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x03,0x01,0x04,0x00,0x00,});
ThirdGivenName1 = Registry.add("ThirdGivenName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x01,0x04,0x01,0x00,});
Salutation = Registry.add("Salutation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x02,0x30,0x06,0x03,0x01,0x05,0x00,0x00,});
Salutation1 = Registry.add("Salutation1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x30,0x06,0x03,0x01,0x05,0x01,0x00,});
HonorsandQualifications = Registry.add("HonorsandQualifications", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x02,0x30,0x06,0x03,0x01,0x06,0x00,0x00,});
HonorsandQualifications1 = Registry.add("HonorsandQualifications1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x30,0x06,0x03,0x01,0x06,0x01,0x00,});
PersonDescription = Registry.add("PersonDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x01,0x07,0x00,0x00,});
PersonDescription1 = Registry.add("PersonDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x01,0x07,0x01,0x00,});
OtherGivenNames = Registry.add("OtherGivenNames", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x30,0x06,0x03,0x01,0x08,0x00,0x00,});
OtherGivenNames1 = Registry.add("OtherGivenNames1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x30,0x06,0x03,0x01,0x08,0x01,0x00,});
AlternateName = Registry.add("AlternateName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x30,0x06,0x03,0x01,0x09,0x00,0x00,});
AlternateName1 = Registry.add("AlternateName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x02,0x30,0x06,0x03,0x01,0x09,0x01,0x00,});
LinkingName = Registry.add("LinkingName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0A,0x00,0x00,});
LinkingName1 = Registry.add("LinkingName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0A,0x01,0x00,});
NameSuffix = Registry.add("NameSuffix", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0B,0x00,0x00,});
NameSuffix1 = Registry.add("NameSuffix1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0B,0x01,0x00,});
FormerFamilyName = Registry.add("FormerFamilyName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0C,0x00,0x00,});
FormerFamilyName1 = Registry.add("FormerFamilyName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0C,0x01,0x00,});
Nationality = Registry.add("Nationality", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0D,0x00,0x00,});
Nationality1 = Registry.add("Nationality1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0D,0x01,0x00,});
Citizenship = Registry.add("Citizenship", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0E,0x00,0x00,});
Citizenship1 = Registry.add("Citizenship1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x02,0x30,0x06,0x03,0x01,0x0E,0x01,0x00,});
MainName = Registry.add("MainName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x03,0x02,0x01,0x00,0x00,});
MainName1 = Registry.add("MainName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x02,0x01,0x01,0x00,});
SupplementaryName = Registry.add("SupplementaryName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x03,0x02,0x02,0x00,0x00,});
SupplementaryName1 = Registry.add("SupplementaryName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x02,0x02,0x01,0x00,});
OrganizationMainName = Registry.add("OrganizationMainName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x03,0x03,0x01,0x00,0x00,});
OrganizationMainName1 = Registry.add("OrganizationMainName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x03,0x01,0x01,0x00,});
SupplementaryOrganizationName = Registry.add("SupplementaryOrganizationName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x02,0x30,0x06,0x03,0x03,0x02,0x00,0x00,});
SupplementaryOrganizationName1 = Registry.add("SupplementaryOrganizationName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x02,0x30,0x06,0x03,0x03,0x02,0x01,0x00,});
ISO3166CountryCode = Registry.add("ISO3166CountryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x01,0x01,0x01,0x00,0x00,0x00,});
RegionCode = Registry.add("RegionCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x01,0x01,0x02,0x00,0x00,0x00,});
CountryName = Registry.add("CountryName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x01,0x01,0x10,0x01,0x00,0x00,});
CountryName1 = Registry.add("CountryName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x01,0x01,0x10,0x01,0x01,0x00,});
RegionName = Registry.add("RegionName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x01,0x01,0x10,0x02,0x00,0x00,});
RegionName1 = Registry.add("RegionName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x01,0x01,0x10,0x02,0x01,0x00,});
ISO6391LanguageCode = Registry.add("ISO6391LanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x01,0x02,0x01,0x00,0x00,0x00,});
ISO6391LanguageCode1 = Registry.add("ISO6391LanguageCode1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x03,0x01,0x01,0x02,0x01,0x01,0x00,0x00,});
ISO639TextLanguageCode = Registry.add("ISO639TextLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x01,0x02,0x02,0x01,0x00,0x00,});
ISO639CaptionsLanguageCode = Registry.add("ISO639CaptionsLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x01,0x02,0x02,0x02,0x00,0x00,});
FrameworkTextLanguageCode = Registry.add("FrameworkTextLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x01,0x02,0x02,0x03,0x00,0x00,});
ExtendedTextLanguageCode = Registry.add("ExtendedTextLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x01,0x02,0x02,0x11,0x00,0x00,});
ExtendedCaptionsLanguageCode = Registry.add("ExtendedCaptionsLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x01,0x02,0x02,0x12,0x00,0x00,});
FrameworkExtendedTextLanguageCode = Registry.add("FrameworkExtendedTextLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x01,0x02,0x02,0x13,0x00,0x00,});
PrimarySpokenLanguageCode = Registry.add("PrimarySpokenLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x01,0x02,0x03,0x01,0x00,0x00,});
SecondarySpokenLanguageCode = Registry.add("SecondarySpokenLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x01,0x02,0x03,0x02,0x00,0x00,});
PrimaryOriginalLanguageCode = Registry.add("PrimaryOriginalLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x01,0x02,0x03,0x03,0x00,0x00,});
SecondaryOriginalLanguageCode = Registry.add("SecondaryOriginalLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x01,0x02,0x03,0x04,0x00,0x00,});
PrimaryExtendedSpokenLanguageCode = Registry.add("PrimaryExtendedSpokenLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x01,0x02,0x03,0x11,0x00,0x00,});
SecondaryExtendedSpokenLanguageCode = Registry.add("SecondaryExtendedSpokenLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x01,0x02,0x03,0x12,0x00,0x00,});
OriginalExtendedSpokenPrimaryLanguageCode = Registry.add("OriginalExtendedSpokenPrimaryLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x01,0x02,0x03,0x13,0x00,0x00,});
SecondaryOriginalExtendedSpokenLanguageCode = Registry.add("SecondaryOriginalExtendedSpokenLanguageCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x01,0x02,0x03,0x14,0x00,0x00,});
LanguageName = Registry.add("LanguageName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x01,0x02,0x10,0x01,0x00,0x00,});
LanguageName1 = Registry.add("LanguageName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x01,0x02,0x10,0x01,0x01,0x00,});
OperatingSystemInterpretations = Registry.add("OperatingSystemInterpretations", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x02,0x01,0x01,0x00,0x00,0x00,});
ByteOrder = Registry.add("ByteOrder", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x02,0x01,0x02,0x00,0x00,0x00,});
EssenceIsIdentified = Registry.add("EssenceIsIdentified", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x02,0x01,0x03,0x00,0x00,0x00,});
ObjectModelVersion = Registry.add("ObjectModelVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x01,0x04,0x00,0x00,0x00,});
SDKVersion = Registry.add("SDKVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x01,0x05,0x00,0x00,0x00,});
MajorVersion = Registry.add("MajorVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x02,0x01,0x06,0x00,0x00,0x00,});
MinorVersion = Registry.add("MinorVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x02,0x01,0x07,0x00,0x00,0x00,});
SectorSize = Registry.add("SectorSize", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x02,0x01,0x08,0x00,0x00,0x00,});
KAGSize = Registry.add("KAGSize", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x01,0x09,0x00,0x00,0x00,});
ReversedByteOrder = Registry.add("ReversedByteOrder", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x01,0x0A,0x00,0x00,0x00,});
IsOptional = Registry.add("IsOptional", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x02,0x01,0x00,0x00,0x00,});
IsSearchable = Registry.add("IsSearchable", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x02,0x02,0x00,0x00,0x00,});
UseDefaultValue = Registry.add("UseDefaultValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x02,0x03,0x01,0x00,0x00,});
DefaultDataValue = Registry.add("DefaultDataValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x02,0x03,0x02,0x00,0x00,});
Size = Registry.add("Size", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x03,0x01,0x00,0x00,0x00,});
IsSigned = Registry.add("IsSigned", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x03,0x02,0x00,0x00,0x00,});
ElementCount = Registry.add("ElementCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x03,0x03,0x00,0x00,0x00,});
ElementNameList = Registry.add("ElementNameList", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x03,0x04,0x00,0x00,0x00,});
TypeDefinitionElementValueList = Registry.add("TypeDefinitionElementValueList", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x03,0x05,0x00,0x00,0x00,});
MemberNameList = Registry.add("MemberNameList", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x03,0x06,0x00,0x00,0x00,});
ExtendibleElementNameList = Registry.add("ExtendibleElementNameList", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x03,0x07,0x00,0x00,0x00,});
TypeDefinitionExtendibleElementValues = Registry.add("TypeDefinitionExtendibleElementValues", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x03,0x08,0x00,0x00,0x00,});
ElementLength = Registry.add("ElementLength", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x01,0x02,0x03,0x09,0x00,0x00,0x00,});
TargetSet = Registry.add("TargetSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x03,0x0B,0x00,0x00,0x00,});
ItemName = Registry.add("ItemName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x0A,0x01,0x00,0x00,0x00,});
ItemName1 = Registry.add("ItemName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x0A,0x01,0x01,0x00,0x00,});
ItemValue = Registry.add("ItemValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x0A,0x02,0x00,0x00,0x00,});
ItemValue1 = Registry.add("ItemValue1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x0A,0x02,0x01,0x00,0x00,});
FillerData = Registry.add("FillerData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x10,0x01,0x00,0x00,0x00,});
KLVDataValue = Registry.add("KLVDataValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x10,0x02,0x00,0x00,0x00,});
PackageKLVData = Registry.add("PackageKLVData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x10,0x03,0x00,0x00,0x00,});
ComponentKLVData = Registry.add("ComponentKLVData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x01,0x02,0x10,0x04,0x00,0x00,0x00,});
TerminatingFillerData = Registry.add("TerminatingFillerData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x02,0x10,0x05,0x00,0x00,0x00,});
KLVMetadataSequence = Registry.add("KLVMetadataSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x10,0x06,0x00,0x00,0x00,});
PackageAttributes = Registry.add("PackageAttributes", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x10,0x07,0x00,0x00,0x00,});
ComponentAttributes = Registry.add("ComponentAttributes", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x10,0x08,0x00,0x00,0x00,});
XMLDocumentText = Registry.add("XMLDocumentText", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x20,0x01,0x00,0x00,0x00,});
XMLDocumentText1 = Registry.add("XMLDocumentText1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x20,0x01,0x01,0x00,0x00,});
XMLDocumentText2 = Registry.add("XMLDocumentText2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x20,0x01,0x02,0x00,0x00,});
XMLDocumentText3 = Registry.add("XMLDocumentText3", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x01,0x02,0x20,0x01,0x03,0x00,0x00,});
MPEG7BiMDecoderInitFrameStream1 = Registry.add("MPEG7BiMDecoderInitFrameStream1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x01,0x01,0x00,});
MPEG7BiMDecoderInitFrameStream2 = Registry.add("MPEG7BiMDecoderInitFrameStream2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x01,0x02,0x00,});
MPEG7BiMDecoderInitFrameStream3 = Registry.add("MPEG7BiMDecoderInitFrameStream3", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x01,0x03,0x00,});
MPEG7BiMDecoderInitFrameStream4 = Registry.add("MPEG7BiMDecoderInitFrameStream4", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x01,0x04,0x00,});
MPEG7BiMDecoderInitFrameStream5 = Registry.add("MPEG7BiMDecoderInitFrameStream5", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x01,0x05,0x00,});
MPEG7BiMDecoderInitFrameStream6 = Registry.add("MPEG7BiMDecoderInitFrameStream6", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x01,0x06,0x00,});
MPEG7BiMDecoderInitFrameStream7 = Registry.add("MPEG7BiMDecoderInitFrameStream7", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x01,0x07,0x00,});
MPEG7BiMDecoderInitFrameStream8 = Registry.add("MPEG7BiMDecoderInitFrameStream8", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x01,0x08,0x00,});
MPEG7BiMAccessUnitFrameStream1 = Registry.add("MPEG7BiMAccessUnitFrameStream1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x02,0x01,0x00,});
MPEG7BiMAccessUnitFrameStream2 = Registry.add("MPEG7BiMAccessUnitFrameStream2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x02,0x02,0x00,});
MPEG7BiMAccessUnitFrameStream3 = Registry.add("MPEG7BiMAccessUnitFrameStream3", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x02,0x03,0x00,});
MPEG7BiMAccessUnitFrameStream4 = Registry.add("MPEG7BiMAccessUnitFrameStream4", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x02,0x04,0x00,});
MPEG7BiMAccessUnitFrameStream5 = Registry.add("MPEG7BiMAccessUnitFrameStream5", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x02,0x05,0x00,});
MPEG7BiMAccessUnitFrameStream6 = Registry.add("MPEG7BiMAccessUnitFrameStream6", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x02,0x06,0x00,});
MPEG7BiMAccessUnitFrameStream7 = Registry.add("MPEG7BiMAccessUnitFrameStream7", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x02,0x07,0x00,});
MPEG7BiMAccessUnitFrameStream8 = Registry.add("MPEG7BiMAccessUnitFrameStream8", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x01,0x02,0x20,0x02,0x02,0x08,0x00,});
LengthSystemName = Registry.add("LengthSystemName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x03,0x01,0x01,0x00,0x00,0x00,});
LengthUnitKind = Registry.add("LengthUnitKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x03,0x01,0x02,0x00,0x00,0x00,});
AngularUnitKind = Registry.add("AngularUnitKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x03,0x02,0x01,0x00,0x00,0x00,});
TimeSystemOffset = Registry.add("TimeSystemOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x03,0x03,0x01,0x00,0x00,0x00,});
TimeUnitKind = Registry.add("TimeUnitKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x01,0x03,0x03,0x02,0x00,0x00,0x00,});
TimingBiasCorrection = Registry.add("TimingBiasCorrection", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x03,0x03,0x03,0x00,0x00,0x00,});
TimingBiasCorrectionDescription = Registry.add("TimingBiasCorrectionDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x01,0x03,0x03,0x04,0x00,0x00,0x00,});
ContentCodingSystem = Registry.add("ContentCodingSystem", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x01,0x01,0x00,0x00,0x00,});
ProgramKind = Registry.add("ProgramKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x01,0x02,0x00,0x00,0x00,});
Genre = Registry.add("Genre", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x01,0x03,0x00,0x00,0x00,});
Genre1 = Registry.add("Genre1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x01,0x03,0x01,0x00,0x00,});
TargetAudience = Registry.add("TargetAudience", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x01,0x04,0x00,0x00,0x00,});
TargetAudience1 = Registry.add("TargetAudience1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x01,0x04,0x01,0x00,0x00,});
ProgramMaterialClassificationCode = Registry.add("ProgramMaterialClassificationCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x01,0x10,0x00,0x00,0x00,});
CatalogDataStatus = Registry.add("CatalogDataStatus", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x02,0x01,0x00,0x00,0x00,});
ThesaurusName = Registry.add("ThesaurusName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x02,0x02,0x00,0x00,0x00,});
ThesaurusName1 = Registry.add("ThesaurusName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x01,0x02,0x02,0x01,0x00,0x00,});
Theme = Registry.add("Theme", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x02,0x03,0x00,0x00,0x00,});
Theme1 = Registry.add("Theme1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x02,0x03,0x01,0x00,0x00,});
ContentClassification = Registry.add("ContentClassification", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x02,0x04,0x00,0x00,0x00,});
SubjectName = Registry.add("SubjectName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x02,0x04,0x01,0x00,0x00,});
SubjectName1 = Registry.add("SubjectName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x02,0x04,0x02,0x00,0x00,});
Keywords = Registry.add("Keywords", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x02,0x05,0x00,0x00,0x00,});
Keywords1 = Registry.add("Keywords1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x02,0x05,0x01,0x00,0x00,});
KeyFrames = Registry.add("KeyFrames", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x02,0x06,0x00,0x00,0x00,});
KeySounds = Registry.add("KeySounds", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x02,0x07,0x00,0x00,0x00,});
KeyData = Registry.add("KeyData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x02,0x08,0x00,0x00,0x00,});
AssignedCategoryName = Registry.add("AssignedCategoryName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x01,0x02,0x09,0x00,0x00,0x00,});
AssignedCategoryName1 = Registry.add("AssignedCategoryName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x01,0x02,0x09,0x01,0x00,0x00,});
AssignedCategoryValue = Registry.add("AssignedCategoryValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x01,0x02,0x0A,0x00,0x00,0x00,});
AssignedCategoryValue1 = Registry.add("AssignedCategoryValue1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x01,0x02,0x0A,0x01,0x00,0x00,});
ShotList = Registry.add("ShotList", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x01,0x02,0x0B,0x00,0x00,0x00,});
PackageUserComments = Registry.add("PackageUserComments", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x01,0x02,0x0C,0x00,0x00,0x00,});
CueInWords = Registry.add("CueInWords", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x01,0x02,0x0D,0x00,0x00,0x00,});
CueInWords1 = Registry.add("CueInWords1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x01,0x02,0x0D,0x01,0x00,0x00,});
CueOutWords = Registry.add("CueOutWords", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x01,0x02,0x0E,0x00,0x00,0x00,});
CueOutWords1 = Registry.add("CueOutWords1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x01,0x02,0x0E,0x01,0x00,0x00,});
KeyFrameSampleCount = Registry.add("KeyFrameSampleCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x02,0x0F,0x00,0x00,0x00,});
KeypointKind = Registry.add("KeypointKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x01,0x02,0x10,0x00,0x00,0x00,});
}
private static void init2() {
KeypointKind1 = Registry.add("KeypointKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x01,0x02,0x10,0x01,0x00,0x00,});
KeypointValue = Registry.add("KeypointValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x01,0x02,0x11,0x00,0x00,0x00,});
KeypointValue1 = Registry.add("KeypointValue1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x01,0x02,0x11,0x01,0x00,0x00,});
FrameworkThesaurusName = Registry.add("FrameworkThesaurusName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x02,0x15,0x00,0x00,0x00,});
FrameworkThesaurusName1 = Registry.add("FrameworkThesaurusName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x02,0x15,0x01,0x00,0x00,});
ComponentUserComments = Registry.add("ComponentUserComments", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x02,0x01,0x02,0x16,0x00,0x00,0x00,});
Abstract = Registry.add("Abstract", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x06,0x01,0x00,0x00,0x00,});
Abstract1 = Registry.add("Abstract1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x06,0x01,0x01,0x00,0x00,});
Purpose = Registry.add("Purpose", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x06,0x02,0x00,0x00,0x00,});
Purpose1 = Registry.add("Purpose1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x06,0x02,0x01,0x00,0x00,});
Description = Registry.add("Description", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x06,0x03,0x00,0x00,0x00,});
Description1 = Registry.add("Description1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x06,0x03,0x01,0x00,0x00,});
ColorDescriptor = Registry.add("ColorDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x06,0x04,0x00,0x00,0x00,});
ColorDescriptor1 = Registry.add("ColorDescriptor1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x06,0x04,0x01,0x00,0x00,});
FormatDescriptor = Registry.add("FormatDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x06,0x05,0x00,0x00,0x00,});
FormatDescriptor1 = Registry.add("FormatDescriptor1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x06,0x05,0x01,0x00,0x00,});
IntentDescriptor = Registry.add("IntentDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x06,0x06,0x00,0x00,0x00,});
IntentDescriptor1 = Registry.add("IntentDescriptor1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x06,0x06,0x01,0x00,0x00,});
TextualDescriptionKind = Registry.add("TextualDescriptionKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x06,0x07,0x00,0x00,0x00,});
TextualDescriptionKind1 = Registry.add("TextualDescriptionKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x01,0x06,0x07,0x01,0x00,0x00,});
GroupSynopsis = Registry.add("GroupSynopsis", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x08,0x00,0x00,0x00,});
GroupSynopsis1 = Registry.add("GroupSynopsis1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x08,0x01,0x00,0x00,});
AnnotationSynopsis = Registry.add("AnnotationSynopsis", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x09,0x00,0x00,0x00,});
AnnotationSynopsis1 = Registry.add("AnnotationSynopsis1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x09,0x01,0x00,0x00,});
AnnotationDescription = Registry.add("AnnotationDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0A,0x00,0x00,0x00,});
AnnotationDescription1 = Registry.add("AnnotationDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0A,0x01,0x00,0x00,});
ScriptingKind = Registry.add("ScriptingKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0B,0x00,0x00,0x00,});
ScriptingKind1 = Registry.add("ScriptingKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0B,0x01,0x00,0x00,});
ScriptingText = Registry.add("ScriptingText", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0C,0x00,0x00,0x00,});
ScriptingText1 = Registry.add("ScriptingText1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0C,0x01,0x00,0x00,});
ShotDescription = Registry.add("ShotDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0D,0x00,0x00,0x00,});
ShotDescription1 = Registry.add("ShotDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0D,0x01,0x00,0x00,});
AnnotationKind = Registry.add("AnnotationKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0E,0x00,0x00,0x00,});
AnnotationKind1 = Registry.add("AnnotationKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0E,0x01,0x00,0x00,});
RelatedMaterialDescription = Registry.add("RelatedMaterialDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0F,0x00,0x00,0x00,});
RelatedMaterialDescription1 = Registry.add("RelatedMaterialDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x06,0x0F,0x01,0x00,0x00,});
JFIFMarkerDescription = Registry.add("JFIFMarkerDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x03,0x02,0x01,0x06,0x10,0x00,0x00,0x00,});
JFIFMarkerDescription1 = Registry.add("JFIFMarkerDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x03,0x02,0x01,0x06,0x10,0x01,0x00,0x00,});
HTMLMetaDescription = Registry.add("HTMLMetaDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x03,0x02,0x01,0x06,0x11,0x00,0x00,0x00,});
HTMLMetaDescription1 = Registry.add("HTMLMetaDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x03,0x02,0x01,0x06,0x11,0x01,0x00,0x00,});
StratumKind = Registry.add("StratumKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x01,0x07,0x01,0x00,0x00,0x00,});
IndividualAwardName = Registry.add("IndividualAwardName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x01,0x01,0x00,0x00,0x00,});
ProgramAwardName = Registry.add("ProgramAwardName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x01,0x02,0x00,0x00,0x00,});
FestivalName = Registry.add("FestivalName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x02,0x01,0x03,0x00,0x00,0x00,});
FestivalName1 = Registry.add("FestivalName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x02,0x01,0x03,0x01,0x00,0x00,});
AwardName = Registry.add("AwardName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x02,0x01,0x04,0x00,0x00,0x00,});
AwardName1 = Registry.add("AwardName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x02,0x01,0x04,0x01,0x00,0x00,});
AwardCategory = Registry.add("AwardCategory", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x02,0x01,0x05,0x00,0x00,0x00,});
AwardCategory1 = Registry.add("AwardCategory1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x02,0x01,0x05,0x01,0x00,0x00,});
NominationCategory = Registry.add("NominationCategory", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x03,0x02,0x02,0x01,0x06,0x00,0x00,0x00,});
NominationCategory1 = Registry.add("NominationCategory1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x03,0x02,0x02,0x01,0x06,0x01,0x00,0x00,});
AssetValue = Registry.add("AssetValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x02,0x01,0x00,0x00,0x00,});
ContentValue = Registry.add("ContentValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x02,0x02,0x00,0x00,0x00,});
CulturalValue = Registry.add("CulturalValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x02,0x03,0x00,0x00,0x00,});
AestheticValue = Registry.add("AestheticValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x02,0x04,0x00,0x00,0x00,});
HistoricalValue = Registry.add("HistoricalValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x02,0x05,0x00,0x00,0x00,});
TechnicalValue = Registry.add("TechnicalValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x02,0x06,0x00,0x00,0x00,});
OtherValues = Registry.add("OtherValues", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x02,0x07,0x00,0x00,0x00,});
ObjectKind = Registry.add("ObjectKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x03,0x01,0x01,0x00,0x00,0x00,});
ObjectKind1 = Registry.add("ObjectKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x03,0x01,0x01,0x01,0x00,0x00,});
ObjectDescription = Registry.add("ObjectDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x03,0x01,0x02,0x00,0x00,0x00,});
ObjectDescription1 = Registry.add("ObjectDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x03,0x01,0x02,0x01,0x00,0x00,});
ObjectDescriptionCode = Registry.add("ObjectDescriptionCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x03,0x01,0x02,0x02,0x00,0x00,});
DescriptionKind = Registry.add("DescriptionKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x03,0x02,0x01,0x00,0x00,0x00,});
DescriptionKind1 = Registry.add("DescriptionKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x03,0x02,0x01,0x01,0x00,0x00,});
DescriptiveComment = Registry.add("DescriptiveComment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x03,0x02,0x02,0x00,0x00,0x00,});
DescriptiveComment1 = Registry.add("DescriptiveComment1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x03,0x02,0x02,0x01,0x00,0x00,});
ObjectName = Registry.add("ObjectName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x04,0x01,0x01,0x01,0x00,0x00,});
MetadataItemName = Registry.add("MetadataItemName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x03,0x02,0x04,0x01,0x02,0x00,0x00,0x00,});
MetadataItemName1 = Registry.add("MetadataItemName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x04,0x01,0x02,0x01,0x00,0x00,});
ShotCommentKind = Registry.add("ShotCommentKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x05,0x01,0x00,0x00,0x00,0x00,});
ShotCommentKind1 = Registry.add("ShotCommentKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x02,0x05,0x01,0x01,0x00,0x00,0x00,});
ShotComment = Registry.add("ShotComment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x02,0x05,0x02,0x00,0x00,0x00,0x00,});
ShotComment1 = Registry.add("ShotComment1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x03,0x02,0x05,0x02,0x01,0x00,0x00,0x00,});
SlateInformation = Registry.add("SlateInformation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x03,0x02,0x05,0x03,0x00,0x00,0x00,0x00,});
ClipKind = Registry.add("ClipKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x02,0x05,0x04,0x00,0x00,0x00,0x00,});
ContextDescription = Registry.add("ContextDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x02,0x06,0x01,0x00,0x00,0x00,0x00,});
CatalogDataStatus1 = Registry.add("CatalogDataStatus1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x03,0x01,0x02,0x01,0x00,0x00,0x00,});
CatalogingSystemName = Registry.add("CatalogingSystemName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x03,0x01,0x02,0x02,0x00,0x00,0x00,});
ComputedKeywords = Registry.add("ComputedKeywords", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x03,0x01,0x02,0x06,0x00,0x00,0x00,});
ComputedKeywords1 = Registry.add("ComputedKeywords1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x03,0x01,0x02,0x06,0x01,0x00,0x00,});
ComputedKeyFrames = Registry.add("ComputedKeyFrames", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x03,0x01,0x02,0x07,0x00,0x00,0x00,});
ComputedKeySounds = Registry.add("ComputedKeySounds", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x03,0x01,0x02,0x08,0x00,0x00,0x00,});
ComputedKeyData = Registry.add("ComputedKeyData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x03,0x01,0x02,0x09,0x00,0x00,0x00,});
ComputedStratumKind = Registry.add("ComputedStratumKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x03,0x03,0x01,0x07,0x01,0x00,0x00,0x00,});
ComputedObjectKind = Registry.add("ComputedObjectKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x03,0x03,0x01,0x01,0x00,0x00,0x00,});
ComputedObjectKind1 = Registry.add("ComputedObjectKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x03,0x03,0x01,0x01,0x01,0x00,0x00,});
VersionNumberString = Registry.add("VersionNumberString", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x03,0x03,0x01,0x02,0x00,0x00,0x00,});
VersionNumberString1 = Registry.add("VersionNumberString1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x03,0x03,0x01,0x02,0x01,0x00,0x00,});
VersionNumber = Registry.add("VersionNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x03,0x03,0x01,0x03,0x00,0x00,0x00,});
ObjectIdentificationConfidence = Registry.add("ObjectIdentificationConfidence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x03,0x03,0x01,0x04,0x00,0x00,0x00,});
ObjectHorizontalAverageDimension = Registry.add("ObjectHorizontalAverageDimension", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x03,0x03,0x01,0x05,0x00,0x00,0x00,});
ObjectVerticalAverageDimension = Registry.add("ObjectVerticalAverageDimension", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x03,0x03,0x01,0x06,0x00,0x00,0x00,});
ObjectAreaDimension = Registry.add("ObjectAreaDimension", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x03,0x03,0x03,0x01,0x07,0x00,0x00,0x00,});
WAVESummary = Registry.add("WAVESummary", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x03,0x03,0x02,0x01,0x00,0x00,0x00,});
AIFCSummary = Registry.add("AIFCSummary", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x03,0x03,0x02,0x02,0x00,0x00,0x00,});
TIFFSummary = Registry.add("TIFFSummary", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x03,0x03,0x03,0x02,0x03,0x00,0x00,0x00,});
DeviceUsageDescription = Registry.add("DeviceUsageDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x03,0x03,0x10,0x01,0x00,0x00,0x00,});
DeviceUsageDescription1 = Registry.add("DeviceUsageDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x03,0x03,0x03,0x10,0x01,0x01,0x00,0x00,});
PresentationAspectRatio = Registry.add("PresentationAspectRatio", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x01,0x01,0x01,0x00,0x00,0x00,});
CaptureAspectRatio = Registry.add("CaptureAspectRatio", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x01,0x01,0x02,0x00,0x00,0x00,});
ViewportAspectRatio = Registry.add("ViewportAspectRatio", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x01,0x01,0x03,0x00,0x00,0x00,});
HorizontalActionSafePercentage = Registry.add("HorizontalActionSafePercentage", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x01,0x01,0x04,0x00,0x00,0x00,});
VerticalActionSafePercentage = Registry.add("VerticalActionSafePercentage", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x01,0x01,0x05,0x00,0x00,0x00,});
HorizontalGraphicsSafePercentage = Registry.add("HorizontalGraphicsSafePercentage", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x01,0x01,0x06,0x00,0x00,0x00,});
VerticalGraphicsSafePercentage = Registry.add("VerticalGraphicsSafePercentage", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x01,0x01,0x07,0x00,0x00,0x00,});
PerceivedDisplayFormatName = Registry.add("PerceivedDisplayFormatName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x01,0x01,0x08,0x00,0x00,0x00,});
PerceivedDisplayFormatCode = Registry.add("PerceivedDisplayFormatCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x01,0x01,0x08,0x01,0x00,0x00,});
CaptureGammaEquation = Registry.add("CaptureGammaEquation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x02,0x01,0x01,0x01,0x00,0x00,});
CaptureGammaEquation1 = Registry.add("CaptureGammaEquation1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x02,0x01,0x01,0x01,0x01,0x00,});
CaptureGammaEquation2 = Registry.add("CaptureGammaEquation2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x02,0x01,0x01,0x01,0x02,0x00,});
LumaEquation = Registry.add("LumaEquation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x02,0x01,0x01,0x02,0x00,0x00,});
ColorimetryCode = Registry.add("ColorimetryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x02,0x01,0x01,0x03,0x00,0x00,});
ColorimetryCode1 = Registry.add("ColorimetryCode1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x02,0x01,0x01,0x03,0x01,0x00,});
SignalFormCode = Registry.add("SignalFormCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x02,0x01,0x01,0x04,0x00,0x00,});
VideoColorKind = Registry.add("VideoColorKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x02,0x01,0x01,0x05,0x00,0x00,});
ColorPrimaries = Registry.add("ColorPrimaries", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x04,0x01,0x02,0x01,0x01,0x06,0x00,0x00,});
ColorPrimaries1 = Registry.add("ColorPrimaries1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x04,0x01,0x02,0x01,0x01,0x06,0x01,0x00,});
PresentationGammaEquation = Registry.add("PresentationGammaEquation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x02,0x01,0x01,0x10,0x00,0x00,});
PresentationGammaEquation1 = Registry.add("PresentationGammaEquation1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x02,0x01,0x01,0x10,0x01,0x00,});
SensorMode = Registry.add("SensorMode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x04,0x01,0x02,0x02,0x01,0x00,0x00,0x00,});
ColorFieldCode = Registry.add("ColorFieldCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x03,0x01,0x01,0x00,0x00,0x00,});
FieldRate = Registry.add("FieldRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x03,0x01,0x02,0x00,0x00,0x00,});
FrameRate = Registry.add("FrameRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x03,0x01,0x03,0x00,0x00,0x00,});
FrameLayout = Registry.add("FrameLayout", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x03,0x01,0x04,0x00,0x00,0x00,});
SamplingStructureCode = Registry.add("SamplingStructureCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x03,0x01,0x05,0x00,0x00,0x00,});
FieldDominance = Registry.add("FieldDominance", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x03,0x01,0x06,0x00,0x00,0x00,});
PictureDisplayRate = Registry.add("PictureDisplayRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x03,0x01,0x07,0x00,0x00,0x00,});
TotalLinesperFrame = Registry.add("TotalLinesperFrame", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x03,0x02,0x01,0x00,0x00,0x00,});
ActiveLinesperFrame = Registry.add("ActiveLinesperFrame", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x03,0x02,0x02,0x00,0x00,0x00,});
LeadingLines = Registry.add("LeadingLines", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x03,0x02,0x03,0x00,0x00,0x00,});
TrailingLines = Registry.add("TrailingLines", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x03,0x02,0x04,0x00,0x00,0x00,});
VideoLineMap = Registry.add("VideoLineMap", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x03,0x02,0x05,0x00,0x00,0x00,});
DisplayF2Offset = Registry.add("DisplayF2Offset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x03,0x02,0x07,0x00,0x00,0x00,});
StoredF2Offset = Registry.add("StoredF2Offset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x03,0x02,0x08,0x00,0x00,0x00,});
ActiveFormatDescriptor = Registry.add("ActiveFormatDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x03,0x02,0x09,0x00,0x00,0x00,});
LineNumber = Registry.add("LineNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x03,0x02,0x0A,0x00,0x00,0x00,});
AnalogVideoSystemName = Registry.add("AnalogVideoSystemName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x04,0x01,0x00,0x00,0x00,0x00,});
AnalogVideoSystemName1 = Registry.add("AnalogVideoSystemName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x04,0x01,0x01,0x00,0x00,0x00,});
ScanningDirection = Registry.add("ScanningDirection", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x04,0x04,0x01,0x00,0x00,0x00,});
LuminanceSampleRate = Registry.add("LuminanceSampleRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x01,0x00,0x00,0x00,});
ActiveSamplesperLine = Registry.add("ActiveSamplesperLine", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x02,0x00,0x00,0x00,});
TotalSamplesperLine = Registry.add("TotalSamplesperLine", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x03,0x00,0x00,0x00,});
SamplingHierarchyCode = Registry.add("SamplingHierarchyCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x04,0x00,0x00,0x00,});
HorizontalSubsampling = Registry.add("HorizontalSubsampling", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x05,0x00,0x00,0x00,});
ColorSiting = Registry.add("ColorSiting", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x06,0x00,0x00,0x00,});
SampledHeight = Registry.add("SampledHeight", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x07,0x00,0x00,0x00,});
SampledWidth = Registry.add("SampledWidth", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x08,0x00,0x00,0x00,});
SampledXOffset = Registry.add("SampledXOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x09,0x00,0x00,0x00,});
SampledYOffset = Registry.add("SampledYOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x0A,0x00,0x00,0x00,});
DisplayHeight = Registry.add("DisplayHeight", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x0B,0x00,0x00,0x00,});
DisplayWidth = Registry.add("DisplayWidth", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x0C,0x00,0x00,0x00,});
DisplayXOffset = Registry.add("DisplayXOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x0D,0x00,0x00,0x00,});
DisplayYOffset = Registry.add("DisplayYOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x0E,0x00,0x00,0x00,});
FilteringCode = Registry.add("FilteringCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x01,0x0F,0x00,0x00,0x00,});
VerticalSubsampling = Registry.add("VerticalSubsampling", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x05,0x01,0x10,0x00,0x00,0x00,});
VideoAverageBitRate = Registry.add("VideoAverageBitRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x05,0x01,0x11,0x00,0x00,0x00,});
VideoFixedBitRate = Registry.add("VideoFixedBitRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x05,0x01,0x12,0x00,0x00,0x00,});
StoredHeight = Registry.add("StoredHeight", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x02,0x01,0x00,0x00,0x00,});
StoredWidth = Registry.add("StoredWidth", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x02,0x02,0x00,0x00,0x00,});
VBILineCount = Registry.add("VBILineCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x03,0x00,0x00,0x00,});
StoredVBILineNumber = Registry.add("StoredVBILineNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x04,0x00,0x00,0x00,});
VBIWrappingType = Registry.add("VBIWrappingType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x05,0x00,0x00,0x00,});
VBIPayloadSampleCount = Registry.add("VBIPayloadSampleCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x06,0x00,0x00,0x00,});
VBIPayloadByteArray = Registry.add("VBIPayloadByteArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x07,0x00,0x00,0x00,});
ANCPacketCount = Registry.add("ANCPacketCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x08,0x00,0x00,0x00,});
StoredANCLineNumber = Registry.add("StoredANCLineNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x09,0x00,0x00,0x00,});
ANCWrappingType = Registry.add("ANCWrappingType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x0A,0x00,0x00,0x00,});
ANCPayloadSampleCount = Registry.add("ANCPayloadSampleCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x0B,0x00,0x00,0x00,});
ANCPayloadByteArray = Registry.add("ANCPayloadByteArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x02,0x0C,0x00,0x00,0x00,});
BitsperPixel = Registry.add("BitsperPixel", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x03,0x01,0x00,0x00,0x00,});
BitsperPixel1 = Registry.add("BitsperPixel1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x05,0x03,0x01,0x01,0x00,0x00,});
RoundingMethodCode = Registry.add("RoundingMethodCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x03,0x02,0x00,0x00,0x00,});
BlackReferenceLevel = Registry.add("BlackReferenceLevel", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x03,0x03,0x00,0x00,0x00,});
WhiteReferenceLevel = Registry.add("WhiteReferenceLevel", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x05,0x03,0x04,0x00,0x00,0x00,});
ColorRangeLevels = Registry.add("ColorRangeLevels", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x05,0x03,0x05,0x00,0x00,0x00,});
PixelLayout = Registry.add("PixelLayout", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x05,0x03,0x06,0x00,0x00,0x00,});
AlphaSampleDepth = Registry.add("AlphaSampleDepth", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x05,0x03,0x07,0x00,0x00,0x00,});
Palette = Registry.add("Palette", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x05,0x03,0x08,0x00,0x00,0x00,});
PaletteLayout = Registry.add("PaletteLayout", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x05,0x03,0x09,0x00,0x00,0x00,});
ComponentDepth = Registry.add("ComponentDepth", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x05,0x03,0x0A,0x00,0x00,0x00,});
ComponentMaximumRef = Registry.add("ComponentMaximumRef", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x05,0x03,0x0B,0x00,0x00,0x00,});
ComponentMinimumRef = Registry.add("ComponentMinimumRef", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x05,0x03,0x0C,0x00,0x00,0x00,});
AlphaMaximumRef = Registry.add("AlphaMaximumRef", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x05,0x03,0x0D,0x00,0x00,0x00,});
AlphaMinimumRef = Registry.add("AlphaMinimumRef", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x05,0x03,0x0E,0x00,0x00,0x00,});
VBIPayloadSampleCoding = Registry.add("VBIPayloadSampleCoding", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x03,0x0F,0x00,0x00,0x00,});
ANCPayloadSampleCoding = Registry.add("ANCPayloadSampleCoding", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x05,0x03,0x10,0x00,0x00,0x00,});
VideoPayloadIdentifier = Registry.add("VideoPayloadIdentifier", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x05,0x04,0x01,0x00,0x00,0x00,});
VideoPayloadIdentifier2002 = Registry.add("VideoPayloadIdentifier2002", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x05,0x04,0x02,0x00,0x00,0x00,});
VideoCodingSchemeID = Registry.add("VideoCodingSchemeID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x06,0x01,0x00,0x00,0x00,0x00,});
FieldFrameTypeCode = Registry.add("FieldFrameTypeCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x06,0x02,0x01,0x01,0x00,0x00,});
SingleSequenceFlag = Registry.add("SingleSequenceFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x02,0x00,0x00,});
ConstantBPictureFlag = Registry.add("ConstantBPictureFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x03,0x00,0x00,});
CodedContentScanningKind = Registry.add("CodedContentScanningKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x04,0x00,0x00,});
LowDelayIndicator = Registry.add("LowDelayIndicator", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x05,0x00,0x00,});
ClosedGOPIndicator = Registry.add("ClosedGOPIndicator", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x06,0x00,0x00,});
IdenticalGOPIndicator = Registry.add("IdenticalGOPIndicator", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x07,0x00,0x00,});
MaximumGOPSize = Registry.add("MaximumGOPSize", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x08,0x00,0x00,});
MaximumBPictureCount = Registry.add("MaximumBPictureCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x09,0x00,0x00,});
ProfileAndLevel = Registry.add("ProfileAndLevel", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x0A,0x00,0x00,});
BitRate = Registry.add("BitRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x01,0x06,0x02,0x01,0x0B,0x00,0x00,});
Rsiz = Registry.add("Rsiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x01,0x00,0x00,0x00,});
Xsiz = Registry.add("Xsiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x02,0x00,0x00,0x00,});
Ysiz = Registry.add("Ysiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x03,0x00,0x00,0x00,});
XOsiz = Registry.add("XOsiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x04,0x00,0x00,0x00,});
YOsiz = Registry.add("YOsiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x05,0x00,0x00,0x00,});
XTsiz = Registry.add("XTsiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x06,0x00,0x00,0x00,});
YTsiz = Registry.add("YTsiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x07,0x00,0x00,0x00,});
XTOsiz = Registry.add("XTOsiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x08,0x00,0x00,0x00,});
YTOsiz = Registry.add("YTOsiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x09,0x00,0x00,0x00,});
Csiz = Registry.add("Csiz", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x0A,0x00,0x00,0x00,});
PictureComponentSizing = Registry.add("PictureComponentSizing", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x0B,0x00,0x00,0x00,});
CodingStyleDefault = Registry.add("CodingStyleDefault", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x0C,0x00,0x00,0x00,});
QuantizationDefault = Registry.add("QuantizationDefault", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x01,0x06,0x03,0x0D,0x00,0x00,0x00,});
PulldownSequence = Registry.add("PulldownSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x08,0x01,0x01,0x00,0x00,0x00,});
PulldownFieldDominance = Registry.add("PulldownFieldDominance", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x08,0x01,0x02,0x00,0x00,0x00,});
VideoandFilmFrameRelationship = Registry.add("VideoandFilmFrameRelationship", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x08,0x01,0x03,0x00,0x00,0x00,});
CaptureFilmFrameRate = Registry.add("CaptureFilmFrameRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x08,0x02,0x01,0x00,0x00,0x00,});
TransferFilmFrameRate = Registry.add("TransferFilmFrameRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x08,0x02,0x02,0x00,0x00,0x00,});
RoundedCaptureFilmFrameRate = Registry.add("RoundedCaptureFilmFrameRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x01,0x08,0x02,0x03,0x00,0x00,0x00,});
DigitalVideoFileFormat = Registry.add("DigitalVideoFileFormat", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x01,0x0B,0x01,0x00,0x00,0x00,0x00,});
VideoTestParameter = Registry.add("VideoTestParameter", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x10,0x01,0x01,0x00,0x00,0x00,});
VideoTestResult = Registry.add("VideoTestResult", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x10,0x01,0x02,0x00,0x00,0x00,});
VideoTestResult1 = Registry.add("VideoTestResult1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x10,0x01,0x03,0x00,0x00,0x00,});
FilmTestParameter = Registry.add("FilmTestParameter", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x10,0x02,0x01,0x00,0x00,0x00,});
FilmTestResult = Registry.add("FilmTestResult", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x10,0x02,0x02,0x00,0x00,0x00,});
FilmTestResult1 = Registry.add("FilmTestResult1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x01,0x10,0x02,0x03,0x00,0x00,0x00,});
ElectrospatialFormulation = Registry.add("ElectrospatialFormulation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x01,0x01,0x01,0x00,0x00,0x00,});
FilteringApplied = Registry.add("FilteringApplied", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x01,0x01,0x02,0x00,0x00,0x00,});
AudioReferenceLevel = Registry.add("AudioReferenceLevel", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x01,0x01,0x03,0x00,0x00,0x00,});
ChannelCount = Registry.add("ChannelCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x01,0x01,0x04,0x00,0x00,0x00,});
ChannelAssignment = Registry.add("ChannelAssignment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x04,0x02,0x01,0x01,0x05,0x00,0x00,0x00,});
AudioMonoChannelCount = Registry.add("AudioMonoChannelCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x01,0x01,0x10,0x01,0x00,0x00,});
AudioStereoChannelCount = Registry.add("AudioStereoChannelCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x01,0x01,0x10,0x02,0x00,0x00,});
AnalogSystem = Registry.add("AnalogSystem", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x02,0x01,0x00,0x00,0x00,0x00,});
AudioSampleRate = Registry.add("AudioSampleRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x03,0x01,0x01,0x00,0x00,0x00,});
AudioSampleRate1 = Registry.add("AudioSampleRate1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x03,0x01,0x01,0x01,0x00,0x00,});
AudioAverageBitRate = Registry.add("AudioAverageBitRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x02,0x03,0x01,0x02,0x00,0x00,0x00,});
AudioFixedBitRateFlag = Registry.add("AudioFixedBitRateFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x02,0x03,0x01,0x03,0x00,0x00,0x00,});
LockedIndicator = Registry.add("LockedIndicator", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x02,0x03,0x01,0x04,0x00,0x00,0x00,});
PeakEnvelope = Registry.add("PeakEnvelope", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x03,0x01,0x05,0x00,0x00,0x00,});
PeakEnvelopeVersion = Registry.add("PeakEnvelopeVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x02,0x03,0x01,0x06,0x00,0x00,0x00,});
PeakEnvelopeFormat = Registry.add("PeakEnvelopeFormat", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x02,0x03,0x01,0x07,0x00,0x00,0x00,});
PointsPerPeakValue = Registry.add("PointsPerPeakValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x02,0x03,0x01,0x08,0x00,0x00,0x00,});
PeakEnvelopeBlockSize = Registry.add("PeakEnvelopeBlockSize", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x02,0x03,0x01,0x09,0x00,0x00,0x00,});
PeakChannelCount = Registry.add("PeakChannelCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x02,0x03,0x01,0x0a,0x00,0x00,0x00,});
PeakFrameCount = Registry.add("PeakFrameCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x02,0x03,0x01,0x0b,0x00,0x00,0x00,});
PeakOfPeaksPosition = Registry.add("PeakOfPeaksPosition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x02,0x03,0x01,0x0c,0x00,0x00,0x00,});
PeakEnvelopeTimestamp = Registry.add("PeakEnvelopeTimestamp", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x02,0x03,0x01,0x0d,0x00,0x00,0x00,});
PeakEnvelopeData = Registry.add("PeakEnvelopeData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x02,0x03,0x01,0x0e,0x00,0x00,0x00,});
BlockAlign = Registry.add("BlockAlign", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x03,0x02,0x01,0x00,0x00,0x00,});
SequenceOffset = Registry.add("SequenceOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x03,0x02,0x02,0x00,0x00,0x00,});
BlockStartOffset = Registry.add("BlockStartOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x03,0x02,0x03,0x00,0x00,0x00,});
FileSecurityReport = Registry.add("FileSecurityReport", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x03,0x02,0x05,0x00,0x00,0x00,});
FileSecurityWave = Registry.add("FileSecurityWave", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x03,0x02,0x06,0x00,0x00,0x00,});
BitsPerSample = Registry.add("BitsPerSample", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x03,0x03,0x01,0x00,0x00,0x00,});
RoundingLaw = Registry.add("RoundingLaw", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x03,0x03,0x02,0x00,0x00,0x00,});
Dither = Registry.add("Dither", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x03,0x03,0x03,0x00,0x00,0x00,});
BitsPerAudioSample = Registry.add("BitsPerAudioSample", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x02,0x03,0x03,0x04,0x00,0x00,0x00,});
AverageBytesPerSecond = Registry.add("AverageBytesPerSecond", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x03,0x03,0x05,0x00,0x00,0x00,});
CodingLawKind = Registry.add("CodingLawKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x02,0x04,0x01,0x00,0x00,0x00,0x00,});
CodingLawName = Registry.add("CodingLawName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x02,0x04,0x01,0x01,0x00,0x00,0x00,});
AudioCodingSchemeID = Registry.add("AudioCodingSchemeID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x02,0x04,0x02,0x00,0x00,0x00,0x00,});
AudioCodingSchemeCode = Registry.add("AudioCodingSchemeCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x02,0x04,0x02,0x01,0x00,0x00,0x00,});
AudioCodingSchemeName = Registry.add("AudioCodingSchemeName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x02,0x04,0x02,0x02,0x00,0x00,0x00,});
LayerNumber = Registry.add("LayerNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x02,0x04,0x03,0x01,0x01,0x00,0x00,});
MPEGAudioBitRate = Registry.add("MPEGAudioBitRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0a,0x04,0x02,0x04,0x03,0x01,0x02,0x00,0x00,});
AuxiliaryBitsMode = Registry.add("AuxiliaryBitsMode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x01,0x01,0x00,0x00,0x00,});
ChannelStatusMode = Registry.add("ChannelStatusMode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x01,0x02,0x00,0x00,0x00,});
FixedChannelStatusData = Registry.add("FixedChannelStatusData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x01,0x03,0x00,0x00,0x00,});
UserDataMode = Registry.add("UserDataMode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x01,0x04,0x00,0x00,0x00,});
FixedUserData = Registry.add("FixedUserData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x01,0x05,0x00,0x00,0x00,});
Emphasis = Registry.add("Emphasis", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x01,0x06,0x00,0x00,0x00,});
BextCodingHistory = Registry.add("BextCodingHistory", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x01,0x00,0x00,0x00,});
BextCodingHistory1 = Registry.add("BextCodingHistory1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x01,0x01,0x00,0x00,});
QltyBasicData = Registry.add("QltyBasicData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x02,0x00,0x00,0x00,});
QltyBasicData1 = Registry.add("QltyBasicData1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x02,0x01,0x00,0x00,});
QltyStartOfModulation = Registry.add("QltyStartOfModulation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x03,0x00,0x00,0x00,});
QltyStartOfModulation1 = Registry.add("QltyStartOfModulation1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x03,0x01,0x00,0x00,});
QltyQualityEvent = Registry.add("QltyQualityEvent", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x04,0x00,0x00,0x00,});
QltyQualityEvent1 = Registry.add("QltyQualityEvent1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x04,0x01,0x00,0x00,});
QltyEndOfModulation = Registry.add("QltyEndOfModulation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x05,0x00,0x00,0x00,});
QltyEndOfModulation1 = Registry.add("QltyEndOfModulation1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x05,0x01,0x00,0x00,});
QltyQualityParameter = Registry.add("QltyQualityParameter", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x06,0x00,0x00,0x00,});
QltyQualityParameter1 = Registry.add("QltyQualityParameter1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x06,0x01,0x00,0x00,});
QltyOperatorComment = Registry.add("QltyOperatorComment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x07,0x00,0x00,0x00,});
QltyOperatorComment1 = Registry.add("QltyOperatorComment1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x07,0x01,0x00,0x00,});
QltyCueSheet = Registry.add("QltyCueSheet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x08,0x00,0x00,0x00,});
QltyCueSheet1 = Registry.add("QltyCueSheet1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x05,0x02,0x08,0x01,0x00,0x00,});
DialNorm = Registry.add("DialNorm", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x02,0x07,0x01,0x00,0x00,0x00,0x00,});
OpticalTrack = Registry.add("OpticalTrack", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x08,0x01,0x00,0x00,0x00,0x00,});
MagneticTrack = Registry.add("MagneticTrack", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x08,0x02,0x00,0x00,0x00,0x00,});
SignaltoNoiseRatio = Registry.add("SignaltoNoiseRatio", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x10,0x01,0x00,0x00,0x00,0x00,});
Weighting = Registry.add("Weighting", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x02,0x10,0x02,0x00,0x00,0x00,0x00,});
CaptionKind = Registry.add("CaptionKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x03,0x01,0x01,0x00,0x00,0x00,0x00,});
CaptionKind1 = Registry.add("CaptionKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x03,0x01,0x01,0x01,0x00,0x00,0x00,});
AnalogDataCodingKind = Registry.add("AnalogDataCodingKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x03,0x02,0x01,0x00,0x00,0x00,0x00,});
DigitalEncodingBitRate = Registry.add("DigitalEncodingBitRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x03,0x03,0x01,0x00,0x00,0x00,0x00,});
DataEssenceCodingID = Registry.add("DataEssenceCodingID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x03,0x03,0x02,0x00,0x00,0x00,0x00,});
TimecodeKind = Registry.add("TimecodeKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x04,0x01,0x01,0x01,0x00,0x00,0x00,});
TimecodeTimebase = Registry.add("TimecodeTimebase", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x04,0x01,0x01,0x02,0x00,0x00,0x00,});
TimecodeTimebase1 = Registry.add("TimecodeTimebase1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x04,0x01,0x01,0x02,0x01,0x00,0x00,});
RoundedTimecodeTimebase = Registry.add("RoundedTimecodeTimebase", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x04,0x01,0x01,0x02,0x06,0x00,0x00,});
TimecodeUserBitsFlag = Registry.add("TimecodeUserBitsFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x04,0x01,0x01,0x03,0x00,0x00,0x00,});
IncludeSync = Registry.add("IncludeSync", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x04,0x01,0x01,0x04,0x00,0x00,0x00,});
DropFrame = Registry.add("DropFrame", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x04,0x01,0x01,0x05,0x00,0x00,0x00,});
DateTimeRate = Registry.add("DateTimeRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x04,0x01,0x02,0x01,0x00,0x00,0x00,});
DateTimeDropFrameFlag = Registry.add("DateTimeDropFrameFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x04,0x01,0x02,0x02,0x00,0x00,0x00,});
DateTimeEmbeddedFlag = Registry.add("DateTimeEmbeddedFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x04,0x01,0x02,0x03,0x00,0x00,0x00,});
DateTimeKind = Registry.add("DateTimeKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x04,0x01,0x02,0x04,0x00,0x00,0x00,});
TimecodeSourceKind = Registry.add("TimecodeSourceKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x04,0x02,0x01,0x00,0x00,0x00,0x00,});
AnalogMetadataCarrier = Registry.add("AnalogMetadataCarrier", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x04,0x02,0x02,0x00,0x00,0x00,0x00,});
DigitalMetadataCarrier = Registry.add("DigitalMetadataCarrier", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x04,0x03,0x01,0x00,0x00,0x00,0x00,});
SliceCount = Registry.add("SliceCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x01,0x01,0x00,0x00,0x00,});
SliceNumber = Registry.add("SliceNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x01,0x02,0x00,0x00,0x00,});
ElementDelta = Registry.add("ElementDelta", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x01,0x03,0x00,0x00,0x00,});
PositionTableIndexing = Registry.add("PositionTableIndexing", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x01,0x04,0x00,0x00,0x00,});
SliceOffsetList = Registry.add("SliceOffsetList", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x01,0x05,0x00,0x00,0x00,});
DeltaEntryArray = Registry.add("DeltaEntryArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x04,0x04,0x01,0x06,0x00,0x00,0x00,});
PositionTableCount = Registry.add("PositionTableCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x04,0x04,0x01,0x07,0x00,0x00,0x00,});
PositionTable = Registry.add("PositionTable", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x04,0x04,0x01,0x08,0x00,0x00,0x00,});
StreamOffset = Registry.add("StreamOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x02,0x01,0x00,0x00,0x00,});
EditUnitFlags = Registry.add("EditUnitFlags", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x02,0x02,0x00,0x00,0x00,});
TemporalOffset = Registry.add("TemporalOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x02,0x03,0x00,0x00,0x00,});
AnchorOffset = Registry.add("AnchorOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x04,0x04,0x02,0x04,0x00,0x00,0x00,});
IndexEntryArray = Registry.add("IndexEntryArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x04,0x04,0x02,0x05,0x00,0x00,0x00,});
ContentPackageIndexArray = Registry.add("ContentPackageIndexArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x04,0x04,0x04,0x02,0x06,0x00,0x00,0x00,});
VideoIndexArray = Registry.add("VideoIndexArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x04,0x04,0x04,0x03,0x01,0x00,0x00,0x00,});
SignalStandard = Registry.add("SignalStandard", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x05,0x01,0x13,0x00,0x00,0x00,0x00,});
AnalogMonitoringandControlCodingKind = Registry.add("AnalogMonitoringandControlCodingKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x05,0x02,0x01,0x00,0x00,0x00,0x00,});
SampleRate = Registry.add("SampleRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x06,0x01,0x01,0x00,0x00,0x00,0x00,});
EssenceLength = Registry.add("EssenceLength", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x06,0x01,0x02,0x00,0x00,0x00,0x00,});
EditUnitLength = Registry.add("EditUnitLength", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x06,0x02,0x01,0x00,0x00,0x00,0x00,});
ApproximateImageContainerSize = Registry.add("ApproximateImageContainerSize", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x04,0x06,0x02,0x02,0x00,0x00,0x00,0x00,});
ProductFormat = Registry.add("ProductFormat", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x04,0x06,0x02,0x03,0x00,0x00,0x00,0x00,});
ProductFormat1 = Registry.add("ProductFormat1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x04,0x06,0x02,0x03,0x01,0x00,0x00,0x00,});
CBEStartOffset = Registry.add("CBEStartOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x06,0x02,0x04,0x00,0x00,0x00,0x00,});
VBEEndOffset = Registry.add("VBEEndOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x04,0x06,0x02,0x05,0x00,0x00,0x00,0x00,});
MetadataEncodingSchemeCode = Registry.add("MetadataEncodingSchemeCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x04,0x06,0x08,0x01,0x00,0x00,0x00,0x00,});
RIFFChunkID = Registry.add("RIFFChunkID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x06,0x08,0x02,0x00,0x00,0x00,0x00,});
HeaderByteCount = Registry.add("HeaderByteCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x06,0x09,0x01,0x00,0x00,0x00,0x00,});
IndexByteCount = Registry.add("IndexByteCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x06,0x09,0x02,0x00,0x00,0x00,0x00,});
RIFFChunkLength = Registry.add("RIFFChunkLength", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x06,0x09,0x03,0x00,0x00,0x00,0x00,});
PackLength = Registry.add("PackLength", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x04,0x06,0x10,0x01,0x00,0x00,0x00,0x00,});
SourceLength = Registry.add("SourceLength", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x04,0x06,0x10,0x02,0x00,0x00,0x00,0x00,});
ComponentDataDefinition = Registry.add("ComponentDataDefinition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x07,0x01,0x00,0x00,0x00,0x00,0x00,});
deprecatedDataDefinition = Registry.add("deprecatedDataDefinition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x07,0x01,0x01,0x00,0x00,0x00,0x00,});
StreamData = Registry.add("StreamData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x07,0x02,0x00,0x00,0x00,0x00,0x00,});
TimecodeStreamData = Registry.add("TimecodeStreamData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x07,0x03,0x00,0x00,0x00,0x00,0x00,});
RIFFChunkData = Registry.add("RIFFChunkData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x07,0x04,0x00,0x00,0x00,0x00,0x00,});
RecordedFormat = Registry.add("RecordedFormat", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x04,0x09,0x01,0x00,0x00,0x00,0x00,0x00,});
RecordedFormat1 = Registry.add("RecordedFormat1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x09,0x01,0x01,0x00,0x00,0x00,0x00,});
MIMEMediaType = Registry.add("MIMEMediaType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x04,0x09,0x02,0x00,0x00,0x00,0x00,0x00,});
MIMEMediaType1 = Registry.add("MIMEMediaType1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x04,0x09,0x02,0x01,0x00,0x00,0x00,0x00,});
MIMECharSet = Registry.add("MIMECharSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x09,0x03,0x00,0x00,0x00,0x00,0x00,});
MIMECharSet1 = Registry.add("MIMECharSet1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x09,0x03,0x01,0x00,0x00,0x00,0x00,});
MIMEEncoding = Registry.add("MIMEEncoding", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x09,0x04,0x00,0x00,0x00,0x00,0x00,});
MIMEEncoding1 = Registry.add("MIMEEncoding1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x04,0x09,0x04,0x01,0x00,0x00,0x00,0x00,});
StorageKind = Registry.add("StorageKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x0F,0x01,0x00,0x00,0x00,0x00,0x00,});
StorageKind1 = Registry.add("StorageKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x0F,0x01,0x01,0x00,0x00,0x00,0x00,});
StorageKindCode = Registry.add("StorageKindCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x0F,0x01,0x02,0x00,0x00,0x00,0x00,});
TapeShellKind = Registry.add("TapeShellKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x01,0x00,0x00,0x00,});
TapeShellKind1 = Registry.add("TapeShellKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x01,0x01,0x00,0x00,});
TapeFormulation = Registry.add("TapeFormulation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x02,0x00,0x00,0x00,});
TapeFormulation1 = Registry.add("TapeFormulation1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x02,0x01,0x00,0x00,});
TapeCapacity = Registry.add("TapeCapacity", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x03,0x00,0x00,0x00,});
TapeManufacturer = Registry.add("TapeManufacturer", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x04,0x00,0x00,0x00,});
TapeManufacturer1 = Registry.add("TapeManufacturer1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x04,0x01,0x00,0x00,});
TapeStock = Registry.add("TapeStock", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x05,0x00,0x00,0x00,});
TapeStock1 = Registry.add("TapeStock1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x05,0x01,0x00,0x00,});
TapeBatchNumber = Registry.add("TapeBatchNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x06,0x00,0x00,0x00,});
TapeBatchNumber1 = Registry.add("TapeBatchNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x01,0x06,0x01,0x00,0x00,});
TapePartitionCapacity = Registry.add("TapePartitionCapacity", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x10,0x01,0x01,0x10,0x01,0x00,0x00,});
DiscPartitionCapacity = Registry.add("DiscPartitionCapacity", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x10,0x01,0x02,0x02,0x00,0x00,0x00,});
FilmColorProcess = Registry.add("FilmColorProcess", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x10,0x01,0x03,0x01,0x01,0x00,0x00,});
EdgeCodeFormat = Registry.add("EdgeCodeFormat", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x10,0x01,0x03,0x01,0x02,0x00,0x00,});
PerforationsPerFrame = Registry.add("PerforationsPerFrame", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x03,0x00,0x00,});
PerforationsPerFrame1 = Registry.add("PerforationsPerFrame1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x03,0x01,0x00,});
FilmFormatName = Registry.add("FilmFormatName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x10,0x01,0x03,0x01,0x04,0x00,0x00,});
FilmFormatName1 = Registry.add("FilmFormatName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x04,0x01,0x00,});
FilmFormatName2 = Registry.add("FilmFormatName2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x04,0x02,0x00,});
FilmStockKind = Registry.add("FilmStockKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x10,0x01,0x03,0x01,0x05,0x00,0x00,});
FilmStockKind1 = Registry.add("FilmStockKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x05,0x01,0x00,});
FilmStockManufacturerName = Registry.add("FilmStockManufacturerName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x10,0x01,0x03,0x01,0x06,0x00,0x00,});
FilmStockManufacturerName1 = Registry.add("FilmStockManufacturerName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x06,0x01,0x00,});
FilmBatchNumber = Registry.add("FilmBatchNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x07,0x00,0x00,});
FilmBatchNumber1 = Registry.add("FilmBatchNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x07,0x01,0x00,});
FilmGauge = Registry.add("FilmGauge", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x08,0x00,0x00,});
EdgeCodeFilmGauge = Registry.add("EdgeCodeFilmGauge", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x01,0x09,0x00,0x00,});
PhysicalMediaLength = Registry.add("PhysicalMediaLength", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x10,0x01,0x03,0x02,0x01,0x00,0x00,});
FilmCaptureAperture = Registry.add("FilmCaptureAperture", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x10,0x01,0x03,0x02,0x02,0x00,0x00,});
ExposedAspectRatio = Registry.add("ExposedAspectRatio", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x10,0x01,0x03,0x02,0x03,0x00,0x00,});
ImageAlignmentOffset = Registry.add("ImageAlignmentOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x18,0x01,0x01,0x00,0x00,0x00,0x00,});
ImageStartOffset = Registry.add("ImageStartOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x18,0x01,0x02,0x00,0x00,0x00,0x00,});
ImageEndOffset = Registry.add("ImageEndOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x18,0x01,0x03,0x00,0x00,0x00,0x00,});
PaddingBits = Registry.add("PaddingBits", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x18,0x01,0x04,0x00,0x00,0x00,0x00,});
ImageCategory = Registry.add("ImageCategory", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x20,0x01,0x01,0x01,0x00,0x00,0x00,});
ImageSourceDeviceKind = Registry.add("ImageSourceDeviceKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x20,0x01,0x02,0x01,0x01,0x00,0x00,});
ImageSourceDeviceKind1 = Registry.add("ImageSourceDeviceKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x04,0x20,0x01,0x02,0x01,0x01,0x01,0x00,});
OpticalTestParameterName = Registry.add("OpticalTestParameterName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x20,0x02,0x01,0x01,0x01,0x00,0x00,});
OpticalTestResult = Registry.add("OpticalTestResult", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x20,0x02,0x01,0x01,0x02,0x00,0x00,});
OpticalTestResult1 = Registry.add("OpticalTestResult1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x20,0x02,0x01,0x01,0x03,0x00,0x00,});
FocalLength = Registry.add("FocalLength", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x20,0x02,0x01,0x01,0x04,0x00,0x00,});
FocalLength1 = Registry.add("FocalLength1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x20,0x02,0x01,0x01,0x04,0x01,0x00,});
SensorSize = Registry.add("SensorSize", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x20,0x02,0x01,0x01,0x05,0x00,0x00,});
LensAperture = Registry.add("LensAperture", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x20,0x02,0x01,0x01,0x06,0x00,0x00,});
SensorTypeCode = Registry.add("SensorTypeCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x20,0x02,0x01,0x01,0x07,0x00,0x00,});
FieldofViewFOVHorizontal = Registry.add("FieldofViewFOVHorizontal", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x20,0x02,0x01,0x01,0x08,0x00,0x00,});
FieldofViewFOVHorizontal1 = Registry.add("FieldofViewFOVHorizontal1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x20,0x02,0x01,0x01,0x08,0x01,0x00,});
AnamorphicLensCharacteristic = Registry.add("AnamorphicLensCharacteristic", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x04,0x20,0x02,0x01,0x01,0x09,0x00,0x00,});
FieldofViewFOVVertical = Registry.add("FieldofViewFOVVertical", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x20,0x02,0x01,0x01,0x0A,0x00,0x00,});
FieldofViewFOVVerticalFP4 = Registry.add("FieldofViewFOVVerticalFP4", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x04,0x20,0x02,0x01,0x01,0x0A,0x01,0x00,});
SensorType = Registry.add("SensorType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x20,0x03,0x01,0x00,0x00,0x00,0x00,});
PolarCharacteristic = Registry.add("PolarCharacteristic", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x04,0x20,0x03,0x02,0x00,0x00,0x00,0x00,});
SystemNameorNumber = Registry.add("SystemNameorNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x04,0x30,0x01,0x00,0x00,0x00,0x00,0x00,});
IntegrationIndication = Registry.add("IntegrationIndication", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x01,0x01,0x00,0x00,0x00,0x00,});
IntegrationIndication1 = Registry.add("IntegrationIndication1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x05,0x01,0x01,0x01,0x01,0x00,0x00,0x00,});
EventIndication = Registry.add("EventIndication", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x01,0x02,0x00,0x00,0x00,0x00,});
EventIndication1 = Registry.add("EventIndication1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x05,0x01,0x01,0x02,0x01,0x00,0x00,0x00,});
QualityFlag = Registry.add("QualityFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x01,0x03,0x00,0x00,0x00,0x00,});
LogoFlag = Registry.add("LogoFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x05,0x01,0x01,0x04,0x00,0x00,0x00,0x00,});
PhysicalInstanceKind = Registry.add("PhysicalInstanceKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x01,0x05,0x00,0x00,0x00,0x00,});
GraphicKind = Registry.add("GraphicKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x05,0x01,0x01,0x06,0x00,0x00,0x00,0x00,});
GraphicUsageKind = Registry.add("GraphicUsageKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x05,0x01,0x01,0x07,0x00,0x00,0x00,0x00,});
GraphicUsageKind1 = Registry.add("GraphicUsageKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x05,0x01,0x01,0x07,0x01,0x00,0x00,0x00,});
PackageUsageKind = Registry.add("PackageUsageKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x05,0x01,0x01,0x08,0x00,0x00,0x00,0x00,});
DigitalorAnalogOrigination = Registry.add("DigitalorAnalogOrigination", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x02,0x01,0x00,0x00,0x00,0x00,});
MicrophonePlacementTechniques = Registry.add("MicrophonePlacementTechniques", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x02,0x04,0x01,0x00,0x00,0x00,});
SimpleFlaggingCount = Registry.add("SimpleFlaggingCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x03,0x01,0x00,0x00,0x00,0x00,});
CopyCount = Registry.add("CopyCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x03,0x02,0x00,0x00,0x00,0x00,});
GenerationCopyNumber = Registry.add("GenerationCopyNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x05,0x01,0x03,0x02,0x01,0x00,0x00,0x00,});
CloneCount = Registry.add("CloneCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x03,0x03,0x00,0x00,0x00,0x00,});
GenerationCloneNumber = Registry.add("GenerationCloneNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x05,0x01,0x03,0x03,0x01,0x00,0x00,0x00,});
WorkinProgressFlag = Registry.add("WorkinProgressFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x01,0x03,0x04,0x00,0x00,0x00,0x00,});
SignatureTuneFlag = Registry.add("SignatureTuneFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x05,0x01,0x04,0x01,0x00,0x00,0x00,0x00,});
BackgroundMusicFlag = Registry.add("BackgroundMusicFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x05,0x01,0x04,0x02,0x00,0x00,0x00,0x00,});
ThemeMusicFlag = Registry.add("ThemeMusicFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x05,0x01,0x04,0x03,0x00,0x00,0x00,0x00,});
InsertMusicFlag = Registry.add("InsertMusicFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x05,0x01,0x04,0x04,0x00,0x00,0x00,0x00,});
VideoorImageCompressionAlgorithm = Registry.add("VideoorImageCompressionAlgorithm", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x02,0x01,0x01,0x00,0x00,0x00,0x00,});
SplicingMetadata = Registry.add("SplicingMetadata", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x02,0x01,0x02,0x01,0x01,0x00,0x00,});
UniformDataFlag = Registry.add("UniformDataFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x02,0x01,0x03,0x01,0x01,0x00,0x00,});
JPEGTableID = Registry.add("JPEGTableID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x02,0x01,0x03,0x01,0x02,0x00,0x00,});
AudioCompressionAlgorithm = Registry.add("AudioCompressionAlgorithm", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x02,0x02,0x01,0x00,0x00,0x00,0x00,});
VideoNoiseReductionAlgorithm = Registry.add("VideoNoiseReductionAlgorithm", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x03,0x01,0x01,0x00,0x00,0x00,0x00,});
AudioNoiseReductionAlgorithm = Registry.add("AudioNoiseReductionAlgorithm", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x03,0x02,0x01,0x00,0x00,0x00,0x00,});
EnhancementorModificationDescription = Registry.add("EnhancementorModificationDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x01,0x01,0x00,0x00,0x00,0x00,});
AlphaTransparency = Registry.add("AlphaTransparency", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x01,0x02,0x00,0x00,0x00,0x00,});
VideoDeviceKind = Registry.add("VideoDeviceKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x02,0x01,0x00,0x00,0x00,0x00,});
VideoDeviceParameterName = Registry.add("VideoDeviceParameterName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x02,0x02,0x00,0x00,0x00,0x00,});
VideoDeviceParameterSetting = Registry.add("VideoDeviceParameterSetting", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x02,0x03,0x00,0x00,0x00,0x00,});
AudioEnhancementorModificationDescription = Registry.add("AudioEnhancementorModificationDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x03,0x01,0x00,0x00,0x00,0x00,});
AudioFirstMixDownProcess = Registry.add("AudioFirstMixDownProcess", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x03,0x02,0x00,0x00,0x00,0x00,});
AudioDeviceKind = Registry.add("AudioDeviceKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x04,0x01,0x00,0x00,0x00,0x00,});
AudioDeviceParameter = Registry.add("AudioDeviceParameter", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x04,0x02,0x00,0x00,0x00,0x00,});
AudioDeviceParameterSetting = Registry.add("AudioDeviceParameterSetting", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x04,0x03,0x00,0x00,0x00,0x00,});
DataEnhancementorModificationDescription = Registry.add("DataEnhancementorModificationDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x05,0x01,0x00,0x00,0x00,0x00,});
DataDeviceKind = Registry.add("DataDeviceKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x06,0x01,0x00,0x00,0x00,0x00,});
DataDeviceParameterName = Registry.add("DataDeviceParameterName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x06,0x02,0x00,0x00,0x00,0x00,});
DataDeviceParameterSetting = Registry.add("DataDeviceParameterSetting", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x20,0x06,0x03,0x00,0x00,0x00,0x00,});
GenerationID = Registry.add("GenerationID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x01,0x00,0x00,0x00,});
ApplicationSupplierName = Registry.add("ApplicationSupplierName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x02,0x00,0x00,0x00,});
ApplicationSupplierName1 = Registry.add("ApplicationSupplierName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x02,0x01,0x00,0x00,});
ApplicationName = Registry.add("ApplicationName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x03,0x00,0x00,0x00,});
ApplicationName1 = Registry.add("ApplicationName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x03,0x01,0x00,0x00,});
ApplicationVersionNumber = Registry.add("ApplicationVersionNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x04,0x00,0x00,0x00,});
ApplicationVersionString = Registry.add("ApplicationVersionString", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x05,0x00,0x00,0x00,});
ApplicationVersionString1 = Registry.add("ApplicationVersionString1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x05,0x01,0x00,0x00,});
ApplicationPlatform = Registry.add("ApplicationPlatform", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x06,0x00,0x00,0x00,});
ApplicationPlatform1 = Registry.add("ApplicationPlatform1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x06,0x01,0x00,0x00,});
ApplicationProductID = Registry.add("ApplicationProductID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x07,0x00,0x00,0x00,});
LinkedGenerationID = Registry.add("LinkedGenerationID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x08,0x00,0x00,0x00,});
ContainerVersion = Registry.add("ContainerVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x09,0x00,0x00,0x00,});
ToolkitVersion = Registry.add("ToolkitVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x07,0x01,0x0A,0x00,0x00,0x00,});
PlugInCategoryID = Registry.add("PlugInCategoryID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x01,0x00,0x00,0x00,0x00,});
PlugInPlatformID = Registry.add("PlugInPlatformID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x02,0x00,0x00,0x00,0x00,});
MinimumSupportedPlatformVersion = Registry.add("MinimumSupportedPlatformVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x03,0x00,0x00,0x00,0x00,});
MaximumSupportedPlatformVersion = Registry.add("MaximumSupportedPlatformVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x04,0x00,0x00,0x00,0x00,});
PlugInEngineID = Registry.add("PlugInEngineID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x05,0x00,0x00,0x00,0x00,});
MinimumSupportedEngineVersion = Registry.add("MinimumSupportedEngineVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x06,0x00,0x00,0x00,0x00,});
MaximumSupportedEngineVersion = Registry.add("MaximumSupportedEngineVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x07,0x00,0x00,0x00,0x00,});
PlugInAPIID = Registry.add("PlugInAPIID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x08,0x00,0x00,0x00,0x00,});
MinimumAPIVersion = Registry.add("MinimumAPIVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x09,0x00,0x00,0x00,0x00,});
MaximumAPIVersion = Registry.add("MaximumAPIVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x0A,0x00,0x00,0x00,0x00,});
SoftwareOnlySupportFlag = Registry.add("SoftwareOnlySupportFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x0B,0x00,0x00,0x00,0x00,});
HardwareAcceleratorFlag = Registry.add("HardwareAcceleratorFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x0C,0x00,0x00,0x00,0x00,});
PlugInLocatorSet = Registry.add("PlugInLocatorSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x0D,0x00,0x00,0x00,0x00,});
AuthenticationFlag = Registry.add("AuthenticationFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x0E,0x00,0x00,0x00,0x00,});
AssociatedMetadataDefinition = Registry.add("AssociatedMetadataDefinition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x20,0x09,0x0F,0x00,0x00,0x00,0x00,});
DefaultFadeType = Registry.add("DefaultFadeType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x30,0x02,0x01,0x00,0x00,0x00,0x00,});
ActiveState = Registry.add("ActiveState", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x30,0x04,0x01,0x00,0x00,0x00,0x00,});
EventTrackEditRate = Registry.add("EventTrackEditRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x04,0x02,0x00,0x00,0x00,0x00,});
DefaultFadeEditRate = Registry.add("DefaultFadeEditRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x04,0x03,0x00,0x00,0x00,0x00,});
EditingEventComment = Registry.add("EditingEventComment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x04,0x04,0x00,0x00,0x00,0x00,});
EditingEventComment1 = Registry.add("EditingEventComment1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x04,0x04,0x01,0x00,0x00,0x00,});
TimelineEditRate = Registry.add("TimelineEditRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x04,0x05,0x00,0x00,0x00,0x00,});
IndexEditRate = Registry.add("IndexEditRate", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x05,0x30,0x04,0x06,0x00,0x00,0x00,0x00,});
FadeInType = Registry.add("FadeInType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x30,0x05,0x01,0x00,0x00,0x00,0x00,});
FadeOutType = Registry.add("FadeOutType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x30,0x05,0x02,0x00,0x00,0x00,0x00,});
SpeedChangeEffectFlag = Registry.add("SpeedChangeEffectFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x30,0x05,0x03,0x00,0x00,0x00,0x00,});
InputSegmentCount = Registry.add("InputSegmentCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x30,0x05,0x04,0x00,0x00,0x00,0x00,});
}
private static void init3() {
Bypass = Registry.add("Bypass", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x30,0x05,0x05,0x00,0x00,0x00,0x00,});
OperationDefinitionID = Registry.add("OperationDefinitionID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x05,0x06,0x00,0x00,0x00,0x00,});
Value = Registry.add("Value", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x05,0x07,0x00,0x00,0x00,0x00,});
EditHint = Registry.add("EditHint", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x05,0x08,0x00,0x00,0x00,0x00,});
OperationDataDefinition = Registry.add("OperationDataDefinition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x05,0x09,0x00,0x00,0x00,0x00,});
OperationCategory = Registry.add("OperationCategory", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x05,0x0A,0x00,0x00,0x00,0x00,});
DisplayUnits = Registry.add("DisplayUnits", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x05,0x0B,0x00,0x00,0x00,0x00,});
DisplayUnits1 = Registry.add("DisplayUnits1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x05,0x0B,0x01,0x00,0x00,0x00,});
BypassOverride = Registry.add("BypassOverride", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x05,0x0C,0x00,0x00,0x00,0x00,});
TimepointValue = Registry.add("TimepointValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x05,0x0D,0x00,0x00,0x00,0x00,});
BeginAnchor = Registry.add("BeginAnchor", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x06,0x01,0x00,0x00,0x00,0x00,});
BeginAnchor1 = Registry.add("BeginAnchor1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x06,0x01,0x01,0x00,0x00,0x00,});
EndAnchor = Registry.add("EndAnchor", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x06,0x02,0x00,0x00,0x00,0x00,});
EndAnchor1 = Registry.add("EndAnchor1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x30,0x06,0x02,0x01,0x00,0x00,0x00,});
VideoCompressionAlgorithm = Registry.add("VideoCompressionAlgorithm", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x40,0x01,0x01,0x00,0x00,0x00,0x00,});
MPEGVideoRecodingDataset = Registry.add("MPEGVideoRecodingDataset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x40,0x01,0x02,0x00,0x00,0x00,0x00,});
UpstreamAudioCompressionAlgorithm = Registry.add("UpstreamAudioCompressionAlgorithm", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x40,0x02,0x01,0x00,0x00,0x00,0x00,});
MPEGAudioRecodingDataset = Registry.add("MPEGAudioRecodingDataset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x05,0x40,0x02,0x02,0x00,0x00,0x00,0x00,});
FilmtoVideoTransferDirection = Registry.add("FilmtoVideoTransferDirection", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x40,0x10,0x01,0x01,0x00,0x00,0x00,});
FilmtoVideoTransferKind = Registry.add("FilmtoVideoTransferKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x40,0x10,0x01,0x02,0x00,0x00,0x00,});
FilmtoVideoTransferPhase = Registry.add("FilmtoVideoTransferPhase", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x05,0x40,0x10,0x01,0x03,0x00,0x00,0x00,});
TeletextSubtitlesFlag = Registry.add("TeletextSubtitlesFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x01,0x01,0x00,0x00,0x00,});
SubtitleDatafileFlag = Registry.add("SubtitleDatafileFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x01,0x02,0x00,0x00,0x00,});
ClosedCaptionSubtitlesFlag = Registry.add("ClosedCaptionSubtitlesFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x01,0x03,0x00,0x00,0x00,});
SampleIndex = Registry.add("SampleIndex", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x02,0x01,0x00,0x00,0x00,});
SourceContainerFormat = Registry.add("SourceContainerFormat", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x02,0x02,0x00,0x00,0x00,});
SourceKey = Registry.add("SourceKey", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x02,0x03,0x00,0x00,0x00,});
SourcePackageID = Registry.add("SourcePackageID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x03,0x01,0x00,0x00,0x00,});
SourceTrackID = Registry.add("SourceTrackID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x03,0x02,0x00,0x00,0x00,});
RelativeScope = Registry.add("RelativeScope", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x03,0x03,0x00,0x00,0x00,});
RelativeTrack = Registry.add("RelativeTrack", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x03,0x04,0x00,0x00,0x00,});
LinkedTrackID = Registry.add("LinkedTrackID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x03,0x05,0x00,0x00,0x00,});
ChannelID = Registry.add("ChannelID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x06,0x01,0x01,0x03,0x06,0x00,0x00,0x00,});
ChannelIDs = Registry.add("ChannelIDs", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x06,0x01,0x01,0x03,0x07,0x00,0x00,0x00,});
MonoSourceTrackIDs = Registry.add("MonoSourceTrackIDs", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x06,0x01,0x01,0x03,0x08,0x00,0x00,0x00,});
DynamicSourcePackageID = Registry.add("DynamicSourcePackageID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x03,0x09,0x00,0x00,0x00,});
DynamicSourceTrackIDs = Registry.add("DynamicSourceTrackIDs", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x03,0x0A,0x00,0x00,0x00,});
SourceIndex = Registry.add("SourceIndex", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x03,0x0B,0x00,0x00,0x00,});
SourceSpecies = Registry.add("SourceSpecies", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x03,0x0C,0x00,0x00,0x00,});
SourceValue = Registry.add("SourceValue", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x03,0x0D,0x00,0x00,0x00,});
ObjectClass = Registry.add("ObjectClass", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x01,0x01,0x00,0x00,});
EssenceContainerFormat = Registry.add("EssenceContainerFormat", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x01,0x02,0x00,0x00,});
deprecatedEssenceContainerFormat = Registry.add("deprecatedEssenceContainerFormat", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x01,0x02,0x01,0x00,});
CodecDefinition = Registry.add("CodecDefinition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x01,0x03,0x00,0x00,});
deprecatedCodecDefinition = Registry.add("deprecatedCodecDefinition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x01,0x03,0x01,0x00,});
ParameterDefinition = Registry.add("ParameterDefinition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x01,0x04,0x00,0x00,});
Interpolation = Registry.add("Interpolation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x01,0x05,0x00,0x00,});
ParameterDataType = Registry.add("ParameterDataType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x01,0x06,0x00,0x00,});
CodecEssenceDescriptor = Registry.add("CodecEssenceDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x01,0x07,0x00,0x00,});
PrimaryPackage = Registry.add("PrimaryPackage", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x01,0x01,0x04,0x01,0x08,0x00,0x00,});
KLVDataType = Registry.add("KLVDataType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x06,0x01,0x01,0x04,0x01,0x09,0x00,0x00,});
CompositionRendering = Registry.add("CompositionRendering", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x06,0x01,0x01,0x04,0x01,0x0A,0x00,0x00,});
Content = Registry.add("Content", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x01,0x00,0x00,});
Dictionary = Registry.add("Dictionary", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x02,0x00,0x00,});
EssenceDescription = Registry.add("EssenceDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x03,0x00,0x00,});
Segment = Registry.add("Segment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x04,0x00,0x00,});
TransitionEffect = Registry.add("TransitionEffect", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x05,0x00,0x00,});
EffectRendering = Registry.add("EffectRendering", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x06,0x00,0x00,});
InputSegment = Registry.add("InputSegment", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x07,0x00,0x00,});
StillFrame = Registry.add("StillFrame", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x08,0x00,0x00,});
Selected = Registry.add("Selected", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x09,0x00,0x00,});
Annotation = Registry.add("Annotation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x0A,0x00,0x00,});
ManufacturerInformationObject = Registry.add("ManufacturerInformationObject", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x02,0x0B,0x00,0x00,});
DescriptiveMetadataFramework = Registry.add("DescriptiveMetadataFramework", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x02,0x0C,0x00,0x00,});
CryptographicContextObject = Registry.add("CryptographicContextObject", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x04,0x02,0x0D,0x00,0x00,});
GroupSet = Registry.add("GroupSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x02,0x40,0x05,0x00,});
BankDetailsSet = Registry.add("BankDetailsSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x02,0x40,0x1C,0x00,});
ImageFormatSet = Registry.add("ImageFormatSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x02,0x40,0x1D,0x00,});
ProcessingSet = Registry.add("ProcessingSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x02,0x40,0x20,0x00,});
ProjectSet = Registry.add("ProjectSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x02,0x40,0x21,0x00,});
ContactsListSet = Registry.add("ContactsListSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x02,0x40,0x22,0x00,});
AnnotationCueWordsSet = Registry.add("AnnotationCueWordsSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x02,0x40,0x23,0x01,});
ShotCueWordsSet = Registry.add("ShotCueWordsSet", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x02,0x40,0x23,0x02,});
CodecEssenceKinds = Registry.add("CodecEssenceKinds", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x03,0x01,0x00,0x00,});
OperationParameters = Registry.add("OperationParameters", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x03,0x02,0x00,0x00,});
deprecatedDescriptiveMetadataSets = Registry.add("deprecatedDescriptiveMetadataSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x01,0x01,0x04,0x03,0x03,0x00,0x00,});
KLVDataParentProperties = Registry.add("KLVDataParentProperties", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x06,0x01,0x01,0x04,0x03,0x04,0x00,0x00,});
TaggedValueParentProperties = Registry.add("TaggedValueParentProperties", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x06,0x01,0x01,0x04,0x03,0x05,0x00,0x00,});
AwardParticipantSets = Registry.add("AwardParticipantSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x03,0x40,0x13,0x01,});
ContractParticipantSets = Registry.add("ContractParticipantSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x03,0x40,0x13,0x02,});
AnnotationParticipantSets = Registry.add("AnnotationParticipantSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x06,0x01,0x01,0x04,0x03,0x40,0x13,0x03,});
CaptionsDescriptionParticipantSets = Registry.add("CaptionsDescriptionParticipantSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x06,0x01,0x01,0x04,0x03,0x40,0x13,0x04,});
PersonSets = Registry.add("PersonSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x03,0x40,0x14,0x00,});
ParticipantOrganizationSets = Registry.add("ParticipantOrganizationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x03,0x40,0x15,0x01,});
PersonOrganizationSets = Registry.add("PersonOrganizationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x03,0x40,0x15,0x02,});
LocationSets = Registry.add("LocationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x03,0x40,0x16,0x00,});
DegradedEffects = Registry.add("DegradedEffects", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x04,0x01,0x00,0x00,});
deprecatedDescriptiveMetadataSetReferences = Registry.add("deprecatedDescriptiveMetadataSetReferences", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x01,0x01,0x04,0x04,0x02,0x00,0x00,});
Packages = Registry.add("Packages", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x05,0x01,0x00,0x00,});
EssenceData = Registry.add("EssenceData", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x05,0x02,0x00,0x00,});
OperationDefinitions = Registry.add("OperationDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x05,0x03,0x00,0x00,});
ParameterDefinitions = Registry.add("ParameterDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x05,0x04,0x00,0x00,});
DataDefinitions = Registry.add("DataDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x05,0x05,0x00,0x00,});
PlugInDefinitions = Registry.add("PlugInDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x05,0x06,0x00,0x00,});
CodecDefinitions = Registry.add("CodecDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x05,0x07,0x00,0x00,});
ContainerDefinitions = Registry.add("ContainerDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x05,0x08,0x00,0x00,});
InterpolationDefinitions = Registry.add("InterpolationDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x05,0x09,0x00,0x00,});
KLVDataDefinitions = Registry.add("KLVDataDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x06,0x01,0x01,0x04,0x05,0x0A,0x00,0x00,});
TaggedValueDefinitions = Registry.add("TaggedValueDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x06,0x01,0x01,0x04,0x05,0x0B,0x00,0x00,});
TitlesSets = Registry.add("TitlesSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x04,0x00,});
GroupSets = Registry.add("GroupSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x05,0x00,});
IdentificationSets = Registry.add("IdentificationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x06,0x00,});
EpisodicItemSets = Registry.add("EpisodicItemSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x07,0x00,});
BrandingSets = Registry.add("BrandingSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x08,0x00,});
EventSets = Registry.add("EventSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x09,0x00,});
PublicationSets = Registry.add("PublicationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x0A,0x00,});
AwardSets = Registry.add("AwardSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x0B,0x00,});
CaptionDescriptionSets = Registry.add("CaptionDescriptionSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x0C,0x00,});
AnnotationSets = Registry.add("AnnotationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x0D,0x00,});
EventAnnotationSets = Registry.add("EventAnnotationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x06,0x01,0x01,0x04,0x05,0x40,0x0D,0x01,});
ProductionSettingPeriodSets = Registry.add("ProductionSettingPeriodSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x0E,0x01,});
SceneSettingPeriodSets = Registry.add("SceneSettingPeriodSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x0E,0x02,});
ScriptingSets = Registry.add("ScriptingSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x0F,0x00,});
ClassificationSets = Registry.add("ClassificationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x10,0x00,});
SceneShotSets = Registry.add("SceneShotSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x11,0x01,});
ClipShotSets = Registry.add("ClipShotSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x11,0x02,});
KeyPointSets = Registry.add("KeyPointSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x12,0x00,});
ShotParticipantRoleSets = Registry.add("ShotParticipantRoleSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x13,0x00,});
ShotPersonSets = Registry.add("ShotPersonSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x14,0x00,});
OrganizationSets = Registry.add("OrganizationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x15,0x00,});
ShotLocationSets = Registry.add("ShotLocationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x16,0x00,});
AddressSets = Registry.add("AddressSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x17,0x00,});
CommunicationSets = Registry.add("CommunicationSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x18,0x00,});
ContractSets = Registry.add("ContractSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x19,0x00,});
RightsSets = Registry.add("RightsSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x1A,0x00,});
PaymentsSets = Registry.add("PaymentsSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x1B,0x00,});
DeviceParametersSets = Registry.add("DeviceParametersSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x1E,0x00,});
ClassificationNameValueSets = Registry.add("ClassificationNameValueSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x1F,0x01,});
ContactNameValueSets = Registry.add("ContactNameValueSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x1F,0x02,});
DeviceParameterNameValueSets = Registry.add("DeviceParameterNameValueSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x05,0x40,0x1F,0x03,});
AddressNameValueSets = Registry.add("AddressNameValueSets", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x06,0x01,0x01,0x04,0x05,0x40,0x1F,0x04,});
AvailableRepresentations = Registry.add("AvailableRepresentations", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x01,0x00,0x00,});
InputSegments = Registry.add("InputSegments", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x02,0x00,0x00,});
EssenceLocators = Registry.add("EssenceLocators", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x03,0x00,0x00,});
IdentificationList = Registry.add("IdentificationList", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x04,0x00,0x00,});
Tracks = Registry.add("Tracks", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x05,0x00,0x00,});
ControlPointList = Registry.add("ControlPointList", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x06,0x00,0x00,});
PackageTracks = Registry.add("PackageTracks", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x07,0x00,0x00,});
Alternates = Registry.add("Alternates", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x08,0x00,0x00,});
ComponentsinSequence = Registry.add("ComponentsinSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x09,0x00,0x00,});
Parameters = Registry.add("Parameters", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x04,0x06,0x0A,0x00,0x00,});
FileDescriptors = Registry.add("FileDescriptors", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x01,0x01,0x04,0x06,0x0B,0x00,0x00,});
MetadataServerLocators = Registry.add("MetadataServerLocators", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x06,0x0C,0x00,0x00,});
RelatedMaterialLocators = Registry.add("RelatedMaterialLocators", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x04,0x06,0x0D,0x00,0x00,});
ScriptingLocators = Registry.add("ScriptingLocators", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x06,0x01,0x01,0x04,0x06,0x0E,0x00,0x00,});
UnknownBWFChunks = Registry.add("UnknownBWFChunks", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x08,0x06,0x01,0x01,0x04,0x06,0x0F,0x00,0x00,});
Subdescriptors = Registry.add("Subdescriptors", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x04,0x06,0x10,0x00,0x00,});
LinkedPackageID = Registry.add("LinkedPackageID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x06,0x01,0x00,0x00,0x00,});
EncryptedTrackFileID = Registry.add("EncryptedTrackFileID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x06,0x02,0x00,0x00,0x00,});
CryptographicContextLink = Registry.add("CryptographicContextLink", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x01,0x01,0x06,0x03,0x00,0x00,0x00,});
ParentClass = Registry.add("ParentClass", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x01,0x00,0x00,0x00,});
Properties = Registry.add("Properties", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x02,0x00,0x00,0x00,});
IsConcrete = Registry.add("IsConcrete", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x03,0x00,0x00,0x00,});
PropertyType = Registry.add("PropertyType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x04,0x00,0x00,0x00,});
LocalID = Registry.add("LocalID", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x05,0x00,0x00,0x00,});
IsUniqueIdentifier = Registry.add("IsUniqueIdentifier", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x06,0x00,0x00,0x00,});
ClassDefinitions = Registry.add("ClassDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x07,0x00,0x00,0x00,});
TypeDefinitions = Registry.add("TypeDefinitions", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x08,0x00,0x00,0x00,});
TargetClassofStrongReference = Registry.add("TargetClassofStrongReference", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x09,0x00,0x00,0x00,});
TargetClassofWeakReference = Registry.add("TargetClassofWeakReference", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x0A,0x00,0x00,0x00,});
EnumerationUnderlyingIntegerType = Registry.add("EnumerationUnderlyingIntegerType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x0B,0x00,0x00,0x00,});
FixedArrayElementType = Registry.add("FixedArrayElementType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x0C,0x00,0x00,0x00,});
VariableArrayElementType = Registry.add("VariableArrayElementType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x0D,0x00,0x00,0x00,});
SetElementType = Registry.add("SetElementType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x0E,0x00,0x00,0x00,});
StringElementType = Registry.add("StringElementType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x0F,0x00,0x00,0x00,});
StreamElementType = Registry.add("StreamElementType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x10,0x00,0x00,0x00,});
MemberTypes = Registry.add("MemberTypes", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x11,0x00,0x00,0x00,});
RenamedType = Registry.add("RenamedType", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x12,0x00,0x00,0x00,});
DictionaryIdentifier = Registry.add("DictionaryIdentifier", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x13,0x00,0x00,0x00,});
DictionaryDescription = Registry.add("DictionaryDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x14,0x00,0x00,0x00,});
DictionaryDescription1 = Registry.add("DictionaryDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x01,0x01,0x07,0x14,0x01,0x00,0x00,});
LocalTagEntries = Registry.add("LocalTagEntries", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x01,0x01,0x07,0x15,0x00,0x00,0x00,});
RootMetaDictionary = Registry.add("RootMetaDictionary", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x06,0x01,0x01,0x07,0x16,0x00,0x00,0x00,});
RootPreface = Registry.add("RootPreface", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x06,0x01,0x01,0x07,0x17,0x00,0x00,0x00,});
RootObjectDirectory = Registry.add("RootObjectDirectory", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x06,0x01,0x01,0x07,0x18,0x00,0x00,0x00,});
RootFormatVersion = Registry.add("RootFormatVersion", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x06,0x01,0x01,0x07,0x19,0x00,0x00,0x00,});
ProgramSupportMaterialReference = Registry.add("ProgramSupportMaterialReference", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x06,0x02,0x01,0x00,0x00,0x00,0x00,0x00,});
AdvertisingMaterialReference = Registry.add("AdvertisingMaterialReference", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x06,0x02,0x02,0x00,0x00,0x00,0x00,0x00,});
ProgramCommercialMaterialReference = Registry.add("ProgramCommercialMaterialReference", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x06,0x02,0x03,0x00,0x00,0x00,0x00,0x00,});
ProductionScriptReference = Registry.add("ProductionScriptReference", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x06,0x03,0x05,0x01,0x00,0x00,0x00,0x00,});
ProductionScriptReference1 = Registry.add("ProductionScriptReference1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x06,0x03,0x05,0x01,0x01,0x00,0x00,0x00,});
TranscriptReference = Registry.add("TranscriptReference", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x06,0x03,0x05,0x02,0x00,0x00,0x00,0x00,});
TranscriptReference1 = Registry.add("TranscriptReference1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x06,0x03,0x05,0x02,0x01,0x00,0x00,0x00,});
BlockContinuityCount = Registry.add("BlockContinuityCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x08,0x01,0x01,0x01,0x00,0x00,0x00,});
StreamPositionIndicator = Registry.add("StreamPositionIndicator", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x06,0x08,0x01,0x02,0x01,0x00,0x00,0x00,});
StreamPositionIndicator1 = Registry.add("StreamPositionIndicator1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x08,0x01,0x02,0x01,0x01,0x00,0x00,});
StreamPositionIndicator2 = Registry.add("StreamPositionIndicator2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x08,0x01,0x02,0x01,0x02,0x00,0x00,});
StreamPositionIndicator3 = Registry.add("StreamPositionIndicator3", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x08,0x01,0x02,0x01,0x03,0x00,0x00,});
ContiguousDataFlag = Registry.add("ContiguousDataFlag", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x06,0x08,0x02,0x01,0x00,0x00,0x00,0x00,});
OffsettoMetadata = Registry.add("OffsettoMetadata", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x08,0x02,0x02,0x01,0x00,0x00,0x00,});
OffsettoMetadata1 = Registry.add("OffsettoMetadata1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x08,0x02,0x02,0x01,0x01,0x00,0x00,});
OffsettoIndexTable = Registry.add("OffsettoIndexTable", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x08,0x02,0x02,0x02,0x00,0x00,0x00,});
OffsettoIndexTable1 = Registry.add("OffsettoIndexTable1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x08,0x02,0x02,0x02,0x01,0x00,0x00,});
ByteOffset = Registry.add("ByteOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x09,0x02,0x01,0x01,0x00,0x00,0x00,});
ReversePlay = Registry.add("ReversePlay", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x09,0x02,0x01,0x02,0x00,0x00,0x00,});
PlaintextOffset = Registry.add("PlaintextOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x09,0x02,0x01,0x03,0x00,0x00,0x00,});
PositioninSequence = Registry.add("PositioninSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x06,0x10,0x01,0x00,0x00,0x00,0x00,0x00,});
RelativePositioninSequenceOffset = Registry.add("RelativePositioninSequenceOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x06,0x10,0x02,0x00,0x00,0x00,0x00,0x00,});
RelativePositioninSequenceName = Registry.add("RelativePositioninSequenceName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x06,0x10,0x03,0x00,0x00,0x00,0x00,0x00,});
TotalNumberinSequence = Registry.add("TotalNumberinSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x06,0x10,0x04,0x00,0x00,0x00,0x00,0x00,});
TripletSequenceNumber = Registry.add("TripletSequenceNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x06,0x10,0x05,0x00,0x00,0x00,0x00,0x00,});
FirstNumberinSequence = Registry.add("FirstNumberinSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x01,0x00,0x00,0x00,0x00,});
FirstNumberinSequence1 = Registry.add("FirstNumberinSequence1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x01,0x01,0x00,0x00,0x00,});
PreviousNumberinSequence = Registry.add("PreviousNumberinSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x02,0x00,0x00,0x00,0x00,});
PreviousNumberinSequence1 = Registry.add("PreviousNumberinSequence1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x02,0x01,0x00,0x00,0x00,});
CurrentNumberinSequence = Registry.add("CurrentNumberinSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x03,0x00,0x00,0x00,0x00,});
CurrentNumberinSequence1 = Registry.add("CurrentNumberinSequence1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x03,0x01,0x00,0x00,0x00,});
NextNumberinSequence = Registry.add("NextNumberinSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x04,0x00,0x00,0x00,0x00,});
NextNumberinSequence1 = Registry.add("NextNumberinSequence1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x04,0x01,0x00,0x00,0x00,});
LastNumberinSequence = Registry.add("LastNumberinSequence", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x05,0x00,0x00,0x00,0x00,});
LastNumberinSequence1 = Registry.add("LastNumberinSequence1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x06,0x10,0x10,0x05,0x01,0x00,0x00,0x00,});
ImageCoordinateSystem = Registry.add("ImageCoordinateSystem", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x01,0x01,0x00,0x00,0x00,0x00,});
MapDatumUsed = Registry.add("MapDatumUsed", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x01,0x02,0x00,0x00,0x00,0x00,});
HorizontalDatum = Registry.add("HorizontalDatum", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x01,0x03,0x00,0x00,0x00,0x00,});
VerticalDatum = Registry.add("VerticalDatum", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x01,0x04,0x00,0x00,0x00,0x00,});
LocalDatumAbsolutePositionAccuracy = Registry.add("LocalDatumAbsolutePositionAccuracy", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x01,0x01,0x00,0x00,});
DeviceAbsolutePositionalAccuracy = Registry.add("DeviceAbsolutePositionalAccuracy", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x02,0x01,0x00,0x00,});
DeviceAltitude = Registry.add("DeviceAltitude", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x02,0x02,0x00,0x00,});
DeviceAltitudeConcise = Registry.add("DeviceAltitudeConcise", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x02,0x02,0x01,0x00,});
DeviceLatitude = Registry.add("DeviceLatitude", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x02,0x04,0x00,0x00,});
DeviceLatitudeDegrees = Registry.add("DeviceLatitudeDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x02,0x04,0x01,0x00,});
DeviceLatitude1 = Registry.add("DeviceLatitude1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x02,0x04,0x02,0x00,});
DeviceLongitude = Registry.add("DeviceLongitude", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x02,0x06,0x00,0x00,});
DeviceLongitudeDegrees = Registry.add("DeviceLongitudeDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x02,0x06,0x01,0x00,});
DeviceLongitude1 = Registry.add("DeviceLongitude1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x02,0x06,0x02,0x00,});
DeviceXDimension = Registry.add("DeviceXDimension", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x02,0x10,0x00,0x00,});
DeviceYDimension = Registry.add("DeviceYDimension", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x02,0x11,0x00,0x00,});
NMEA0183GPSDocumentText = Registry.add("NMEA0183GPSDocumentText", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x02,0x01,0x02,0x30,0x00,0x00,});
FramePositionalAccuracy = Registry.add("FramePositionalAccuracy", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x03,0x01,0x00,0x00,});
FrameCenterLatitude = Registry.add("FrameCenterLatitude", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x03,0x02,0x00,0x00,});
FrameCenterLatitude1 = Registry.add("FrameCenterLatitude1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x02,0x02,0x00,});
FrameCenterLatitudeDegrees = Registry.add("FrameCenterLatitudeDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x03,0x03,0x00,0x00,});
FrameCenterLongitude = Registry.add("FrameCenterLongitude", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x03,0x04,0x00,0x00,});
FrameCenterLongitude1 = Registry.add("FrameCenterLongitude1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x04,0x02,0x00,});
FrameCenterLongitudeDegrees = Registry.add("FrameCenterLongitudeDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x03,0x05,0x00,0x00,});
FrameCenterLatitudeLongitude = Registry.add("FrameCenterLatitudeLongitude", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x01,0x03,0x06,0x00,0x00,});
CornerLatitudePoint1 = Registry.add("CornerLatitudePoint1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x07,0x00,0x00,});
CornerLatitudePoint1DecimalDegrees = Registry.add("CornerLatitudePoint1DecimalDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x07,0x01,0x00,});
CornerLatitudePoint2 = Registry.add("CornerLatitudePoint2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x08,0x00,0x00,});
CornerLatitudePoint2DecimalDegrees = Registry.add("CornerLatitudePoint2DecimalDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x08,0x01,0x00,});
CornerLatitudePoint3 = Registry.add("CornerLatitudePoint3", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x09,0x00,0x00,});
CornerLatitudePoint3DecimalDegrees = Registry.add("CornerLatitudePoint3DecimalDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x09,0x01,0x00,});
CornerLatitudePoint4 = Registry.add("CornerLatitudePoint4", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0A,0x00,0x00,});
CornerLatitudePoint4DecimalDegrees = Registry.add("CornerLatitudePoint4DecimalDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0A,0x01,0x00,});
CornerLongitudePoint1 = Registry.add("CornerLongitudePoint1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0B,0x00,0x00,});
CornerLongitudePoint1DecimalDegrees = Registry.add("CornerLongitudePoint1DecimalDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0B,0x01,0x00,});
CornerLongitudePoint2 = Registry.add("CornerLongitudePoint2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0C,0x00,0x00,});
CornerLongitudePoint2DecimalDegrees = Registry.add("CornerLongitudePoint2DecimalDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0C,0x01,0x00,});
CornerLongitudePoint3 = Registry.add("CornerLongitudePoint3", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0D,0x00,0x00,});
CornerLongitudePoint3DecimalDegrees = Registry.add("CornerLongitudePoint3DecimalDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0D,0x01,0x00,});
CornerLongitudePoint4 = Registry.add("CornerLongitudePoint4", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0E,0x00,0x00,});
CornerLongitudePoint4DecimalDegrees = Registry.add("CornerLongitudePoint4DecimalDegrees", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x02,0x01,0x03,0x0E,0x01,0x00,});
BoundingRectangle = Registry.add("BoundingRectangle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x02,0x01,0x03,0x0F,0x00,0x00,});
GeographicLocation = Registry.add("GeographicLocation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x02,0x01,0x03,0x10,0x00,0x00,});
GeographicPolygonCoordinates = Registry.add("GeographicPolygonCoordinates", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x02,0x01,0x03,0x11,0x00,0x00,});
GeographicAreaNorthwest = Registry.add("GeographicAreaNorthwest", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x02,0x01,0x03,0x12,0x00,0x00,});
GeographicAreaSoutheast = Registry.add("GeographicAreaSoutheast", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x02,0x01,0x03,0x13,0x00,0x00,});
GeographicAreaSourceDatum = Registry.add("GeographicAreaSourceDatum", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x02,0x01,0x03,0x14,0x00,0x00,});
GeographicPolygonSourceDatum = Registry.add("GeographicPolygonSourceDatum", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x02,0x01,0x03,0x15,0x00,0x00,});
FrameCenterElevation = Registry.add("FrameCenterElevation", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x07,0x01,0x02,0x01,0x03,0x16,0x00,0x00,});
LocalDatumRelativePositionAccuracy = Registry.add("LocalDatumRelativePositionAccuracy", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x02,0x01,0x01,0x00,0x00,});
DeviceRelativePositionalAccuracy = Registry.add("DeviceRelativePositionalAccuracy", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x02,0x02,0x01,0x00,0x00,});
DeviceRelativePositionX = Registry.add("DeviceRelativePositionX", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x02,0x02,0x02,0x00,0x00,});
DeviceRelativePositionY = Registry.add("DeviceRelativePositionY", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x02,0x02,0x03,0x00,0x00,});
DeviceRelativePositionZ = Registry.add("DeviceRelativePositionZ", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x02,0x02,0x04,0x00,0x00,});
SubjectRelativePositionalAccuracy = Registry.add("SubjectRelativePositionalAccuracy", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x02,0x03,0x01,0x00,0x00,});
PositionWithinViewportImageXCoordinatePixels = Registry.add("PositionWithinViewportImageXCoordinatePixels", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x03,0x01,0x00,0x00,0x00,});
PositionWithinViewportImageYCoordinatePixels = Registry.add("PositionWithinViewportImageYCoordinatePixels", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x03,0x02,0x00,0x00,0x00,});
SourceImageCenterXCoordinatePixels = Registry.add("SourceImageCenterXCoordinatePixels", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x03,0x03,0x00,0x00,0x00,});
SourceImageCenterYCoordinatePixels = Registry.add("SourceImageCenterYCoordinatePixels", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x03,0x04,0x00,0x00,0x00,});
ViewportImageCenterCCoordinatePixels = Registry.add("ViewportImageCenterCCoordinatePixels", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x03,0x05,0x00,0x00,0x00,});
ViewportImageCenterYCoordinatePixels = Registry.add("ViewportImageCenterYCoordinatePixels", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x02,0x03,0x06,0x00,0x00,0x00,});
DeviceAbsoluteSpeed = Registry.add("DeviceAbsoluteSpeed", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x03,0x01,0x01,0x01,0x00,0x00,});
DeviceAbsoluteHeading = Registry.add("DeviceAbsoluteHeading", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x03,0x01,0x01,0x02,0x00,0x00,});
SubjectAbsoluteSpeed = Registry.add("SubjectAbsoluteSpeed", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x03,0x01,0x02,0x01,0x00,0x00,});
SubjectAbsoluteHeading = Registry.add("SubjectAbsoluteHeading", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x03,0x01,0x02,0x02,0x00,0x00,});
DeviceRelativeSpeed = Registry.add("DeviceRelativeSpeed", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x03,0x02,0x01,0x01,0x00,0x00,});
DeviceRelativeHeading = Registry.add("DeviceRelativeHeading", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x03,0x02,0x01,0x02,0x00,0x00,});
SubjectRelativeSpeed = Registry.add("SubjectRelativeSpeed", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x03,0x02,0x02,0x01,0x00,0x00,});
SubjectRelativeHeading = Registry.add("SubjectRelativeHeading", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x03,0x02,0x02,0x02,0x00,0x00,});
SlantRange = Registry.add("SlantRange", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x08,0x01,0x01,0x00,0x00,0x00,});
SubjectDistance = Registry.add("SubjectDistance", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x08,0x01,0x02,0x00,0x00,0x00,});
TargetWidth = Registry.add("TargetWidth", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x09,0x02,0x01,0x00,0x00,0x00,});
ViewportHeight = Registry.add("ViewportHeight", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x09,0x04,0x01,0x01,0x01,0x00,});
ViewportWidth = Registry.add("ViewportWidth", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x09,0x04,0x01,0x01,0x02,0x00,});
SensorRollAngle = Registry.add("SensorRollAngle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x10,0x01,0x01,0x00,0x00,0x00,});
AngletoNorth = Registry.add("AngletoNorth", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x10,0x01,0x02,0x00,0x00,0x00,});
ObliquityAngle = Registry.add("ObliquityAngle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x10,0x01,0x03,0x00,0x00,0x00,});
PlatformRollAngle = Registry.add("PlatformRollAngle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x10,0x01,0x04,0x00,0x00,0x00,});
PlatformPitchAngle = Registry.add("PlatformPitchAngle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x10,0x01,0x05,0x00,0x00,0x00,});
PlatformHeadingAngle = Registry.add("PlatformHeadingAngle", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x10,0x01,0x06,0x00,0x00,0x00,});
PlaceKeyword = Registry.add("PlaceKeyword", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x01,0x01,0x00,0x00,});
PlaceKeyword1 = Registry.add("PlaceKeyword1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x01,0x01,0x01,0x00,});
ObjectCountryCode = Registry.add("ObjectCountryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x02,0x01,0x00,0x00,});
ObjectCountryCode1 = Registry.add("ObjectCountryCode1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x02,0x01,0x01,0x00,});
ShootingCountryCode = Registry.add("ShootingCountryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x02,0x02,0x00,0x00,});
SettingCountryCode = Registry.add("SettingCountryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x02,0x03,0x00,0x00,});
CopyrightLicenseCountryCode = Registry.add("CopyrightLicenseCountryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x02,0x04,0x00,0x00,});
IntellectualPropertyLicenseCountryCode = Registry.add("IntellectualPropertyLicenseCountryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x02,0x05,0x00,0x00,});
ObjectCountryCodeMethod = Registry.add("ObjectCountryCodeMethod", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x02,0x06,0x00,0x00,});
CountryCodeMethod = Registry.add("CountryCodeMethod", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x02,0x07,0x00,0x00,});
CountryCodeMethod1 = Registry.add("CountryCodeMethod1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x20,0x01,0x02,0x07,0x01,0x00,});
NonUSClassifyingCountryCode = Registry.add("NonUSClassifyingCountryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x02,0x08,0x00,0x00,});
ClassifyingCountryCode = Registry.add("ClassifyingCountryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x20,0x01,0x02,0x08,0x01,0x00,});
ReleasableCountryCode = Registry.add("ReleasableCountryCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x02,0x09,0x00,0x00,});
ReleasableCountryCode1 = Registry.add("ReleasableCountryCode1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x01,0x20,0x01,0x02,0x09,0x01,0x00,});
ObjectRegionCode = Registry.add("ObjectRegionCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x03,0x01,0x00,0x00,});
ObjectRegionName = Registry.add("ObjectRegionName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x03,0x01,0x01,0x00,});
ShootingRegionCode = Registry.add("ShootingRegionCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x03,0x02,0x00,0x00,});
ShootingRegionName = Registry.add("ShootingRegionName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x03,0x02,0x01,0x00,});
SettingRegionCode = Registry.add("SettingRegionCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x03,0x03,0x00,0x00,});
SettingRegionName = Registry.add("SettingRegionName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x03,0x03,0x01,0x00,});
CopyrightLicenseRegionCode = Registry.add("CopyrightLicenseRegionCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x03,0x04,0x00,0x00,});
CopyrightLicenseRegionName = Registry.add("CopyrightLicenseRegionName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x03,0x04,0x01,0x00,});
IntellectualPropertyLicenseRegionCode = Registry.add("IntellectualPropertyLicenseRegionCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x03,0x05,0x00,0x00,});
IntellectualPropertyLicenseRegionName = Registry.add("IntellectualPropertyLicenseRegionName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x03,0x05,0x01,0x00,});
RoomNumber = Registry.add("RoomNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x01,0x01,0x00,});
RoomNumber1 = Registry.add("RoomNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x01,0x01,0x01,});
StreetNumber = Registry.add("StreetNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x01,0x02,0x00,});
StreetNumber1 = Registry.add("StreetNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x01,0x02,0x01,});
StreetName = Registry.add("StreetName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x01,0x03,0x00,});
StreetName1 = Registry.add("StreetName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x01,0x03,0x01,});
PostalTown = Registry.add("PostalTown", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x01,0x04,0x00,});
PostalTown1 = Registry.add("PostalTown1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x01,0x04,0x01,});
CityName = Registry.add("CityName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x01,0x05,0x00,});
CityName1 = Registry.add("CityName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x01,0x05,0x01,});
StateorProvinceorCountyName = Registry.add("StateorProvinceorCountyName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x01,0x06,0x00,});
StateorProvinceorCountyName1 = Registry.add("StateorProvinceorCountyName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x01,0x06,0x01,});
PostalCode = Registry.add("PostalCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x01,0x07,0x00,});
PostalCode1 = Registry.add("PostalCode1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x01,0x07,0x01,});
CountryName2 = Registry.add("CountryName2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x01,0x08,0x00,});
CountryName3 = Registry.add("CountryName3", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x01,0x08,0x01,});
RoomorSuiteName = Registry.add("RoomorSuiteName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x01,0x20,0x01,0x04,0x01,0x11,0x00,});
RoomorSuiteName1 = Registry.add("RoomorSuiteName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x01,0x20,0x01,0x04,0x01,0x11,0x01,});
BuildingName = Registry.add("BuildingName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x01,0x20,0x01,0x04,0x01,0x12,0x00,});
BuildingName1 = Registry.add("BuildingName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x01,0x20,0x01,0x04,0x01,0x12,0x01,});
AddressLine = Registry.add("AddressLine", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x20,0x01,0x04,0x01,0x13,0x00,});
AddressLine1 = Registry.add("AddressLine1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x20,0x01,0x04,0x01,0x13,0x01,});
PlaceName = Registry.add("PlaceName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x20,0x01,0x04,0x01,0x14,0x00,});
PlaceName1 = Registry.add("PlaceName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x20,0x01,0x04,0x01,0x14,0x01,});
GeographicalCoordinates = Registry.add("GeographicalCoordinates", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x20,0x01,0x04,0x01,0x15,0x00,});
AstronomicalBodyName = Registry.add("AstronomicalBodyName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x20,0x01,0x04,0x01,0x16,0x00,});
AstronomicalBodyName1 = Registry.add("AstronomicalBodyName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x01,0x20,0x01,0x04,0x01,0x16,0x01,});
SettingRoomNumber = Registry.add("SettingRoomNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x02,0x01,0x00,});
SettingRoomNumber1 = Registry.add("SettingRoomNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x02,0x01,0x01,});
SettingStreetNumberorBuildingName = Registry.add("SettingStreetNumberorBuildingName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x02,0x02,0x00,});
SettingStreetNumberorBuildingName1 = Registry.add("SettingStreetNumberorBuildingName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x02,0x02,0x01,});
SettingStreetName = Registry.add("SettingStreetName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x02,0x03,0x00,});
SettingStreetName1 = Registry.add("SettingStreetName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x02,0x03,0x01,});
SettingTownName = Registry.add("SettingTownName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x02,0x04,0x00,});
SettingTownName1 = Registry.add("SettingTownName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x02,0x04,0x01,});
SettingCityName = Registry.add("SettingCityName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x02,0x05,0x00,});
SettingCityName1 = Registry.add("SettingCityName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x02,0x05,0x01,});
SettingStateorProvinceorCountyName = Registry.add("SettingStateorProvinceorCountyName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x02,0x06,0x00,});
SettingStateorProvinceorCountyName1 = Registry.add("SettingStateorProvinceorCountyName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x02,0x06,0x01,});
SettingPostalCode = Registry.add("SettingPostalCode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x02,0x07,0x00,});
SettingPostalCode1 = Registry.add("SettingPostalCode1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x02,0x07,0x01,});
SettingCountryName = Registry.add("SettingCountryName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x04,0x02,0x08,0x00,});
SettingCountryName1 = Registry.add("SettingCountryName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x04,0x02,0x08,0x01,});
TelephoneNumber = Registry.add("TelephoneNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x10,0x03,0x01,0x00,});
TelephoneNumber1 = Registry.add("TelephoneNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x10,0x03,0x01,0x01,});
FaxNumber = Registry.add("FaxNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x10,0x03,0x02,0x00,});
FaxNumber1 = Registry.add("FaxNumber1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x10,0x03,0x02,0x01,});
EMailAddress = Registry.add("EMailAddress", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x01,0x10,0x03,0x03,0x00,});
EMailAddress1 = Registry.add("EMailAddress1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x01,0x10,0x03,0x03,0x01,});
CentralTelephoneNumber = Registry.add("CentralTelephoneNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x01,0x20,0x01,0x10,0x03,0x04,0x00,});
MobileTelephoneNumber = Registry.add("MobileTelephoneNumber", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x01,0x20,0x01,0x10,0x03,0x05,0x00,});
URL2 = Registry.add("URL2", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x01,0x20,0x01,0x10,0x03,0x06,0x00,});
URL3 = Registry.add("URL3", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x01,0x20,0x01,0x10,0x03,0x06,0x01,});
SettingDescription = Registry.add("SettingDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x01,0x20,0x02,0x01,0x00,0x00,0x00,});
SettingDescription1 = Registry.add("SettingDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x01,0x20,0x02,0x01,0x01,0x00,0x00,});
LocationDescription = Registry.add("LocationDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x01,0x20,0x02,0x02,0x00,0x00,0x00,});
LocationDescription1 = Registry.add("LocationDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x01,0x20,0x02,0x02,0x01,0x00,0x00,});
LocationKind = Registry.add("LocationKind", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x01,0x20,0x02,0x03,0x00,0x00,0x00,});
LocationKind1 = Registry.add("LocationKind1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x01,0x20,0x02,0x03,0x01,0x00,0x00,});
UTCUserDateTime = Registry.add("UTCUserDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x01,0x01,0x01,0x00,0x00,});
LocalUserDateTime = Registry.add("LocalUserDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x01,0x01,0x02,0x00,0x00,});
SMPTE309MUserDateTime = Registry.add("SMPTE309MUserDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x01,0x01,0x03,0x00,0x00,});
SMPTE12MUserDateTime = Registry.add("SMPTE12MUserDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x01,0x01,0x04,0x00,0x00,});
POSIXMicroseconds = Registry.add("POSIXMicroseconds", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x02,0x01,0x01,0x01,0x05,0x00,0x00,});
UTCStartDateTime = Registry.add("UTCStartDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x01,0x01,0x00,0x00,});
UTCStartDateTime1 = Registry.add("UTCStartDateTime1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x02,0x01,0x02,0x01,0x01,0x01,0x00,});
LocalStartDateTime = Registry.add("LocalStartDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x01,0x02,0x00,0x00,});
UTCInstantDateTime = Registry.add("UTCInstantDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x02,0x01,0x02,0x01,0x03,0x00,0x00,});
UTCInstantDateTime1 = Registry.add("UTCInstantDateTime1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x02,0x01,0x02,0x01,0x03,0x01,0x00,});
TimecodeStartDateTime = Registry.add("TimecodeStartDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x02,0x01,0x00,0x00,});
UTCEndDateTime = Registry.add("UTCEndDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x03,0x01,0x00,0x00,});
LocalEndDateTime = Registry.add("LocalEndDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x03,0x02,0x00,0x00,});
TimecodeEndDateTime = Registry.add("TimecodeEndDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x04,0x01,0x00,0x00,});
UTCLastModificationDateTime = Registry.add("UTCLastModificationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x05,0x01,0x00,0x00,});
UTCLastModificationDateTime1 = Registry.add("UTCLastModificationDateTime1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x02,0x01,0x02,0x05,0x01,0x01,0x00,});
LocalLastModificationDateTime = Registry.add("LocalLastModificationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x05,0x02,0x00,0x00,});
TimecodeLastModificationDateTime = Registry.add("TimecodeLastModificationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x06,0x01,0x00,0x00,});
UTCEventStartDateTime = Registry.add("UTCEventStartDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x07,0x01,0x00,0x00,});
UTCEventStartDateTime1 = Registry.add("UTCEventStartDateTime1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x02,0x07,0x01,0x01,0x00,});
LocalEventStartDateTime = Registry.add("LocalEventStartDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x07,0x02,0x00,0x00,});
LocalEventStartDateTime1 = Registry.add("LocalEventStartDateTime1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x02,0x07,0x02,0x01,0x00,});
LocalFestivalDateTime = Registry.add("LocalFestivalDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x02,0x01,0x02,0x07,0x10,0x01,0x00,});
TimecodeEventStartDateTime = Registry.add("TimecodeEventStartDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x08,0x01,0x00,0x00,});
TimecodeArray = Registry.add("TimecodeArray", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x02,0x01,0x02,0x08,0x02,0x00,0x00,});
UTCEventEndDateTime = Registry.add("UTCEventEndDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x09,0x01,0x00,0x00,});
UTCEventEndDateTime1 = Registry.add("UTCEventEndDateTime1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x02,0x09,0x01,0x01,0x00,});
LocalEventEndDateTime = Registry.add("LocalEventEndDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x09,0x02,0x00,0x00,});
LocalEventEndDateTime1 = Registry.add("LocalEventEndDateTime1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x02,0x09,0x02,0x01,0x00,});
TimecodeEventEndDateTime = Registry.add("TimecodeEventEndDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x02,0x0A,0x01,0x00,0x00,});
StartTimeRelativetoReference = Registry.add("StartTimeRelativetoReference", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x03,0x01,0x01,0x00,0x00,});
StartTimecodeRelativetoReference = Registry.add("StartTimecodeRelativetoReference", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x03,0x01,0x02,0x00,0x00,});
Origin = Registry.add("Origin", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x03,0x01,0x03,0x00,0x00,});
StartTimeRelativetoReference1 = Registry.add("StartTimeRelativetoReference1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x03,0x01,0x04,0x00,0x00,});
StartTimecode = Registry.add("StartTimecode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x03,0x01,0x05,0x00,0x00,});
CutPoint = Registry.add("CutPoint", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x03,0x01,0x06,0x00,0x00,});
KeyTimePoint = Registry.add("KeyTimePoint", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x03,0x01,0x07,0x00,0x00,});
ShotStartPosition = Registry.add("ShotStartPosition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x02,0x01,0x03,0x01,0x09,0x00,0x00,});
IndexingStartPosition = Registry.add("IndexingStartPosition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x02,0x01,0x03,0x01,0x0A,0x00,0x00,});
EventOrigin = Registry.add("EventOrigin", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x02,0x01,0x03,0x01,0x0B,0x00,0x00,});
MarkIn = Registry.add("MarkIn", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x02,0x01,0x03,0x01,0x0C,0x00,0x00,});
UserPosition = Registry.add("UserPosition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x02,0x01,0x03,0x01,0x0D,0x00,0x00,});
PackageMarkInPosition = Registry.add("PackageMarkInPosition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x07,0x02,0x01,0x03,0x01,0x0E,0x00,0x00,});
MaterialEndTimeOffset = Registry.add("MaterialEndTimeOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x03,0x02,0x01,0x00,0x00,});
MaterialEndTimecodeOffset = Registry.add("MaterialEndTimecodeOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x03,0x02,0x02,0x00,0x00,});
MarkOut = Registry.add("MarkOut", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x02,0x01,0x03,0x02,0x03,0x00,0x00,});
PackageMarkOutPosition = Registry.add("PackageMarkOutPosition", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x0A,0x07,0x02,0x01,0x03,0x02,0x04,0x00,0x00,});
EventStartTimeOffset = Registry.add("EventStartTimeOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x03,0x03,0x01,0x00,0x00,});
EventStartTimecodeOffset = Registry.add("EventStartTimecodeOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x03,0x03,0x02,0x00,0x00,});
EventStart = Registry.add("EventStart", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x03,0x03,0x03,0x00,0x00,});
EventEndTimeOffset = Registry.add("EventEndTimeOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x03,0x04,0x01,0x00,0x00,});
EventEndTimecodeOffset = Registry.add("EventEndTimecodeOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x03,0x04,0x02,0x00,0x00,});
FrameCountOffset = Registry.add("FrameCountOffset", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x03,0x10,0x01,0x01,0x00,});
ControlPointTime = Registry.add("ControlPointTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x03,0x10,0x02,0x01,0x00,});
EventElapsedTimetoStart = Registry.add("EventElapsedTimetoStart", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x02,0x01,0x03,0x10,0x03,0x01,0x00,});
EventElapsedTimetoEnd = Registry.add("EventElapsedTimetoEnd", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x03,0x07,0x02,0x01,0x03,0x10,0x03,0x02,0x00,});
TimePeriodName = Registry.add("TimePeriodName", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x08,0x01,0x00,0x00,0x00,});
TimePeriodName1 = Registry.add("TimePeriodName1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x08,0x01,0x01,0x00,0x00,});
SettingDateTime = Registry.add("SettingDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x08,0x02,0x00,0x00,0x00,});
SettingPeriodDescription = Registry.add("SettingPeriodDescription", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x02,0x01,0x08,0x03,0x00,0x00,0x00,});
SettingPeriodDescription1 = Registry.add("SettingPeriodDescription1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x02,0x01,0x08,0x03,0x01,0x00,0x00,});
LocalCreationDateTime = Registry.add("LocalCreationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x10,0x01,0x01,0x00,0x00,});
TimecodeCreationDateTime = Registry.add("TimecodeCreationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x10,0x01,0x02,0x00,0x00,});
CreationDateTime = Registry.add("CreationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x10,0x01,0x03,0x00,0x00,});
ClipCreationDateTime = Registry.add("ClipCreationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x02,0x01,0x10,0x01,0x04,0x00,0x00,});
LocalModificationDateTime = Registry.add("LocalModificationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x10,0x02,0x01,0x00,0x00,});
TimecodeModificationDateTime = Registry.add("TimecodeModificationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x01,0x10,0x02,0x02,0x00,0x00,});
ModificationDateTime = Registry.add("ModificationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x10,0x02,0x03,0x00,0x00,});
ContainerLastModificationDateTime = Registry.add("ContainerLastModificationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x10,0x02,0x04,0x00,0x00,});
PackageLastModificationDateTime = Registry.add("PackageLastModificationDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x01,0x10,0x02,0x05,0x00,0x00,});
ContractDateTime = Registry.add("ContractDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x20,0x01,0x00,0x00,0x00,});
RightsStartDateTime = Registry.add("RightsStartDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x20,0x02,0x00,0x00,0x00,});
RightsStopDateTime = Registry.add("RightsStopDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x20,0x03,0x00,0x00,0x00,});
PaymentDueDateTime = Registry.add("PaymentDueDateTime", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x04,0x07,0x02,0x01,0x20,0x04,0x00,0x00,0x00,});
FrameCount = Registry.add("FrameCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x02,0x01,0x01,0x01,0x00,0x00,});
IndexDuration = Registry.add("IndexDuration", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x02,0x02,0x01,0x01,0x02,0x00,0x00,});
ComponentLength = Registry.add("ComponentLength", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x02,0x01,0x01,0x03,0x00,0x00,});
DefaultFadeDuration = Registry.add("DefaultFadeDuration", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x02,0x01,0x01,0x05,0x01,0x00,});
FadeInDuration = Registry.add("FadeInDuration", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x02,0x01,0x01,0x05,0x02,0x00,});
FadeOutDuration = Registry.add("FadeOutDuration", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x07,0x02,0x02,0x01,0x01,0x05,0x03,0x00,});
MaterialAbsoluteDuration = Registry.add("MaterialAbsoluteDuration", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x02,0x01,0x02,0x01,0x00,0x00,});
MaterialAbsoluteDuration1 = Registry.add("MaterialAbsoluteDuration1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x02,0x01,0x02,0x02,0x00,0x00,});
TextlessBlackDuration = Registry.add("TextlessBlackDuration", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x02,0x01,0x02,0x03,0x00,0x00,});
ShotDuration = Registry.add("ShotDuration", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x05,0x07,0x02,0x02,0x01,0x02,0x04,0x00,0x00,});
VideoClipDuration = Registry.add("VideoClipDuration", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x07,0x07,0x02,0x02,0x01,0x02,0x05,0x00,0x00,});
EventAbsoluteDurationFrameCount = Registry.add("EventAbsoluteDurationFrameCount", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x02,0x01,0x03,0x01,0x00,0x00,});
EventAbsoluteDuration = Registry.add("EventAbsoluteDuration", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x02,0x01,0x03,0x02,0x00,0x00,});
EventAbsoluteDuration1 = Registry.add("EventAbsoluteDuration1", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x02,0x01,0x03,0x03,0x00,0x00,});
BufferDelay = Registry.add("BufferDelay", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x01,0x07,0x02,0x03,0x01,0x03,0x01,0x00,0x00,});
ToleranceMode = Registry.add("ToleranceMode", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x02,0x05,0x01,0x00,0x00,0x00,0x00,});
ToleranceWindow = Registry.add("ToleranceWindow", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x02,0x05,0x02,0x00,0x00,0x00,0x00,});
ToleranceInterpolationMethod = Registry.add("ToleranceInterpolationMethod", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x09,0x07,0x02,0x05,0x03,0x00,0x00,0x00,0x00,});
TapeFormat = Registry.add("TapeFormat", new byte[] {0x06,0x0E,0x2B,0x34,0x01,0x01,0x01,0x02,0x0D,0x01,0x01,0x01,0x01,0x01,0x01,0x00,});
}
public static UL AverageBytesPerSecond;
public static UL NamespacePrefixes;
public static UL NamespacePrefix1;
public static UL FrameworkThesaurusName;
public static UL ComponentDepth;
public static UL AestheticValue;
public static UL PlaintextOffset;
public static UL JobFunctionName1;
public static UL XMLDocumentText2;
public static UL TrackName;
public static UL PlugInCategoryID;
public static UL IntellectualPropertyLicenseRegionName;
public static UL NameSuffix1;
public static UL AwardCategory;
public static UL WorkingTitle;
public static UL VerticalGraphicsSafePercentage;
public static UL UMIDVideo;
public static UL ComputedObjectKind;
public static UL ChannelCount;
public static UL TotalSamplesperLine;
public static UL LocationDescription1;
public static UL ShotCueWordsSet;
public static UL Rsiz;
public static UL MinimumSupportedPlatformVersion;
public static UL FilmFormatName2;
public static UL IEEEManufacturerID;
public static UL LocalStartDateTime;
public static UL Description1;
public static UL ISCI;
public static UL GroupSets;
public static UL KLVDataType;
public static UL Alternates;
public static UL ClipIDArray;
public static UL UnknownBWFChunks;
public static UL SubjectName1;
public static UL PublishingServiceName1;
public static UL StreetNumber1;
public static UL PerceivedDisplayFormatCode;
public static UL TransitionEffect;
public static UL FilmStockKind;
public static UL ContractInstallmentPercentage;
public static UL TargetWidth;
public static UL RootPreface;
public static UL EncryptedSourceValue;
public static UL ScriptingText1;
public static UL CodecEssenceKinds;
public static UL ProgramCommercialMaterialReference;
public static UL UMIDData5;
public static UL StillFrame;
public static UL DescriptiveMetadataSchemes;
public static UL TapeFormulation1;
public static UL PositionTableCount;
public static UL LocalTagUniqueID;
public static UL LinkedTrackID;
public static UL FestivalName1;
public static UL SlantRange;
public static UL DictionaryDescription1;
public static UL MIMECharSet;
public static UL ContractClauseDescription1;
public static UL VBILineCount;
public static UL deprecatedDescriptiveMetadataSetReferences;
public static UL MaterialEndTimecodeOffset;
public static UL CopyrightLicenseRegionCode;
public static UL StoredVBILineNumber;
public static UL KLVDataParentProperties;
public static UL MapDatumUsed;
public static UL Citizenship1;
public static UL ApplicationName1;
public static UL Abstract1;
public static UL ContractTermsofBusiness1;
public static UL FixedArrayElementType;
public static UL TargetSet;
public static UL ContractParticipantSets;
public static UL VersionNumberString1;
public static UL OrganizationSets;
public static UL EssenceContainerArray;
public static UL SecondGivenName1;
public static UL UTCLastModificationDateTime;
public static UL CompositionRendering;
public static UL OriginalProducerName1;
public static UL ContributionStatus1;
public static UL SettingTownName;
public static UL DeviceAltitude;
public static UL KeySound;
public static UL CodecDefinition;
public static UL OrganizationMainName;
public static UL ImageAlignmentOffset;
public static UL InterestedPartyName;
public static UL CountryCodeMethod1;
public static UL UMIDSystem4;
public static UL MemberNameList;
public static UL ContractDateTime;
public static UL RoomNumber;
public static UL SystemNameorNumber;
public static UL AudioFixedBitRateFlag;
public static UL TimePeriodName;
public static UL ObjectCountryCode1;
public static UL MPEG7BiMDecoderInitFrameStream7;
public static UL FilmColorProcess;
public static UL DeviceAbsoluteHeading;
public static UL VerticalSubsampling;
public static UL StoredHeight;
public static UL StreamElementType;
public static UL DeviceLatitude;
public static UL LocalID;
public static UL FrameCount;
public static UL PositionTable;
public static UL IdentifierIssuingAuthority1;
public static UL KAGSize;
public static UL SourceTrackID;
public static UL EventAbsoluteDuration1;
public static UL ScramblingKeyValue;
public static UL ProgrammingGroupKind;
public static UL CodingLawKind;
public static UL ShotTrackIDs;
public static UL RootMetaDictionary;
public static UL MainCatalogNumber;
public static UL MPEG7BiMAccessUnitFrameStream6;
public static UL ToleranceWindow;
public static UL SignalFormCode;
public static UL SMPTEUL;
public static UL TrackNumberBatch;
public static UL QltyBasicData;
public static UL ConstantBPictureFlag;
public static UL UMIDAudio2;
public static UL PlatformPitchAngle;
public static UL IndexStreamID;
public static UL BrandOriginalTitle1;
public static UL BankDetailsSet;
public static UL LocationDescription;
public static UL VBIPayloadByteArray;
public static UL ISWC;
public static UL LastNumberinSequence1;
public static UL ChannelHandle;
public static UL ColorimetryCode1;
public static UL RegionCode;
public static UL PrimaryPackage;
public static UL SampledWidth;
public static UL GenerationCopyNumber;
public static UL AssignedCategoryValue1;
public static UL ObjectKind1;
public static UL EventStartTimecodeOffset;
public static UL MPEG7BiMAccessUnitFrameStream2;
public static UL PresentationGammaEquation1;
public static UL ComputedKeySounds;
public static UL ImageSourceDeviceKind1;
public static UL ProgrammingGroupTitle;
public static UL ProductFormat1;
public static UL GroupSynopsis1;
public static UL QltyStartOfModulation1;
public static UL EndAnchor;
public static UL UPN;
public static UL DescriptiveMetadataTrackIDs;
public static UL Username1;
public static UL DefinitionObjectID;
public static UL ParentClass;
public static UL TimingBiasCorrectionDescription;
public static UL ScriptingKind;
public static UL WAVESummary;
public static UL SecondaryExtendedSpokenLanguageCode;
public static UL VersionNumber;
public static UL ClassificationComment;
public static UL ElementDelta;
public static UL OffsettoIndexTable1;
public static UL CornerLongitudePoint1DecimalDegrees;
public static UL Keywords1;
public static UL Username;
public static UL RoundedCaptureFilmFrameRate;
public static UL ItemName1;
public static UL TimepointValue;
public static UL IdentifierIssuingAuthority;
public static UL TargetAudience1;
public static UL ContentClassification;
public static UL OperationDefinitions;
public static UL CodingLawName;
public static UL FilmFormatName;
public static UL PeakEnvelopeBlockSize;
public static UL SettingPeriodDescription1;
public static UL PURL;
public static UL TimecodeArray;
public static UL ShotLocationSets;
public static UL MaximumSupportedEngineVersion;
public static UL DeltaEntryArray;
public static UL LocalEndDateTime;
public static UL URL;
public static UL TapeFormulation;
public static UL LengthSystemName;
public static UL PixelLayout;
public static UL DeviceAssetNumber;
public static UL PlugInEngineID;
public static UL EdgeCodeHeader;
public static UL TotalPayment;
public static UL SourceOrganization1;
public static UL DataEssenceCodingID;
public static UL LocalEventEndDateTime1;
public static UL BlockContinuityCount;
public static UL VideoTestResult1;
public static UL ReversePlay;
public static UL EditUnitLength;
public static UL StartTimeRelativetoReference;
public static UL EventElapsedTimetoStart;
public static UL RightsStartDateTime;
public static UL FrameCenterElevation;
public static UL CornerLatitudePoint4;
public static UL QualityFlag;
public static UL MIMEEncoding1;
public static UL AnnotationCueWordsSet;
public static UL Annotation;
public static UL UMIDAudio;
public static UL UTCEventStartDateTime1;
public static UL SourceTrackIDs;
public static UL MajorVersion;
public static UL AddressNameValueSets;
public static UL HTMLDOCTYPE1;
public static UL QuantizationDefault;
public static UL PayerAccountNumber;
public static UL ShotStartPosition;
public static UL AnnotationSets;
public static UL ApplicationPlatform;
public static UL ContributionStatus;
public static UL VideoDeviceParameterName;
public static UL GenerationCloneNumber;
public static UL NatureofPersonalityIndividualorGroup1;
public static UL TranscriptReference;
public static UL RelativeTrack;
public static UL SupplierAccountNumber;
public static UL ScriptingKind1;
public static UL UMIDData;
public static UL ActiveLinesperFrame;
public static UL TypeDefinitions;
public static UL UTCUserDateTime;
public static UL NextNumberinSequence1;
public static UL OriginalTitle;
public static UL TimecodeTimebase;
public static UL AccountingReferenceNumber;
public static UL CountryName1;
public static UL FrameworkTitle;
public static UL OtherGivenNames;
public static UL SecurityClassificationCaveats1;
public static UL ClassificationSets;
public static UL ProductionOrganizationRole1;
public static UL FrameCenterLatitudeLongitude;
public static UL AstronomicalBodyName1;
public static UL AwardName;
public static UL LowDelayIndicator;
public static UL OffsettoMetadata;
public static UL ExCCIData;
public static UL PlugInPlatformID;
public static UL LocalTagEntries;
public static UL ContractClauseDescription;
public static UL ClassificationComment1;
public static UL DeviceRelativePositionZ;
public static UL SettingCountryName1;
public static UL deprecatedDefinedName1;
public static UL ViewportImageCenterYCoordinatePixels;
public static UL IdentifierValue;
public static UL ControlPointTime;
public static UL FrameCenterLatitude1;
public static UL ViewportWidth;
public static UL PlatformDesignation;
public static UL CopyrightOwnerName1;
public static UL ProductionScriptReference;
public static UL DictionaryDescription;
public static UL IsConcrete;
public static UL RightsConditionDescription;
public static UL Password1;
public static UL QltyQualityParameter;
public static UL ExtendedClipIDArray;
public static UL ClipNumber1;
public static UL SecondarySpokenLanguageCode;
public static UL PlatformRollAngle;
public static UL ShotPersonSets;
public static UL PublishingServiceName;
public static UL EventEndTimeOffset;
public static UL OperationDataDefinition;
public static UL CISACLegalEntityID;
public static UL RightsStopDateTime;
public static UL OffsettoMetadata1;
public static UL MaximumUseCount;
public static UL DeviceKindCode;
public static UL KeypointKind1;
public static UL IndexEntryArray;
public static UL ContractLineName;
public static UL TransmissionID;
public static UL IdentificationUL;
public static UL CipherAlgorithm;
public static UL UMIDData4;
public static UL PaddingBits;
public static UL AddressLine1;
public static UL LocalModificationDateTime;
public static UL SettingCountryName;
public static UL AdvertisingMaterialReference;
public static UL TeletextSubtitlesFlag;
public static UL SettingStreetNumberorBuildingName;
public static UL SettingStreetName1;
public static UL Content;
public static UL SecondGivenName;
public static UL ColorFieldCode;
public static UL ComponentLength;
public static UL PictureDisplayRate;
public static UL StreamPositionIndicator;
public static UL LocationSets;
public static UL RIFFChunkID;
public static UL PositionWithinViewportImageYCoordinatePixels;
public static UL PurchasingDepartment;
public static UL FilteringApplied;
public static UL NamespaceURI;
public static UL ColorDescriptor1;
public static UL SeriesNumber1;
public static UL ISO6391LanguageCode;
public static UL RegionName;
public static UL VerticalActionSafePercentage;
public static UL IntentDescriptor;
public static UL ShotCommentKind1;
public static UL IdentificationList;
public static UL SequenceOffset;
public static UL PreviousNumberinSequence1;
public static UL SceneSettingPeriodSets;
public static UL RP217DataStreamPID;
public static UL CatalogingSystemName;
public static UL ContentCodingSystem;
public static UL MaximumAPIVersion;
public static UL Citizenship;
public static UL TargetClassofStrongReference;
public static UL ThirdGivenName;
public static UL UMIDVideo4;
public static UL TimecodeEventStartDateTime;
public static UL RoyaltyPaymentInformation;
public static UL KeypointValue1;
public static UL Password;
public static UL TimelineEditRate;
public static UL RecordedFormat1;
public static UL Palette;
public static UL OriginalProducerName;
public static UL UTCEventStartDateTime;
public static UL ByteOffset;
public static UL SecurityClassification;
public static UL ClipNumber;
public static UL SectorSize;
public static UL VideoDeviceKind;
public static UL TextlessBlackDuration;
public static UL LocalTapeNumber;
public static UL IndividualAwardName;
public static UL PeakOfPeaksPosition;
public static UL CommunicationSets;
public static UL CornerLongitudePoint4;
public static UL OperationalPatternUL;
public static UL MPEG7BiMDecoderInitFrameStream2;
public static UL FamilyName1;
public static UL ComponentKLVData;
public static UL FrameCountOffset;
public static UL ContactKind;
public static UL MIMEMediaType;
public static UL FilmtoVideoTransferDirection;
public static UL DescriptionKind1;
public static UL KeySounds;
public static UL SpeedChangeEffectFlag;
public static UL CaptureGammaEquation2;
public static UL AudioDeviceParameterSetting;
public static UL LicenseOptionsDescription;
public static UL SettingStateorProvinceorCountyName1;
public static UL ObjectIdentificationConfidence;
public static UL AlternateName1;
public static UL FilmTestResult;
public static UL ObjectDescription1;
public static UL OrganizationKind;
public static UL VideoCompressionAlgorithm;
public static UL SMPTE12MUserDateTime;
public static UL TypeDefinitionExtendibleElementValues;
public static UL TrackNumber;
public static UL LocalFilePath1;
public static UL AuxiliaryBitsMode;
public static UL SettingDateTime;
public static UL TotalNumberinSequence;
public static UL ProgramAwardName;
public static UL UMIDVideo5;
public static UL PublishingMediumName1;
public static UL RightsComment;
public static UL IntentDescriptor1;
public static UL XMLDocumentText3;
public static UL CaptionDescriptionSets;
public static UL DateTimeKind;
public static UL PersonDescription1;
public static UL SubjectRelativeHeading;
public static UL Jurisdiction1;
public static UL InputSegment;
public static UL TotalIncome;
public static UL SupplierAccountName1;
public static UL EditingEventComment1;
public static UL FilmCaptureAperture;
public static UL LinkedPackageID;
public static UL AlphaMinimumRef;
public static UL StartTimeRelativetoReference1;
public static UL ActiveFormatDescriptor;
public static UL PrimarySpokenLanguageCode;
public static UL SecondaryTitle;
public static UL ThesaurusName;
public static UL MPEG7BiMAccessUnitFrameStream3;
public static UL SliceOffsetList;
public static UL JobTitle;
public static UL CollectionName;
public static UL SettingRoomNumber1;
public static UL OtherValues;
public static UL PurchaserIdentificationKind;
public static UL UTCEventEndDateTime;
public static UL ProjectName;
public static UL SourceKey;
public static UL FieldofViewFOVVerticalFP4;
public static UL ContentValue;
public static UL CloneCount;
public static UL ExtendedClipID;
public static UL SupplierAccountName;
public static UL DeviceAbsolutePositionalAccuracy;
public static UL MPEG7BiMAccessUnitFrameStream1;
public static UL ClipKind;
public static UL YOsiz;
public static UL MarkOut;
public static UL AddressSets;
public static UL ObjectDescription;
public static UL FilmFormatName1;
public static UL KeyText;
public static UL MaterialAbsoluteDuration1;
public static UL CurrencyName;
public static UL PurchasingOrganizationName;
public static UL ChannelStatusMode;
public static UL HorizontalActionSafePercentage;
public static UL FrameworkThesaurusName1;
public static UL EventStartTimeOffset;
public static UL LocalDatumRelativePositionAccuracy;
public static UL BroadcastOrganizationName1;
public static UL DeviceAltitudeConcise;
public static UL LumaEquation;
public static UL BitsperPixel;
public static UL XOsiz;
public static UL FocalLength;
public static UL ApplicationVersionString1;
public static UL SampleIndex;
public static UL HonorsandQualifications;
public static UL KeyData;
public static UL EventOrigin;
public static UL AnalogMetadataCarrier;
public static UL TitlesSets;
public static UL CodecDefinitions;
public static UL TapeManufacturer;
public static UL VideoPayloadIdentifier2002;
public static UL TapeManufacturer1;
public static UL DegradedEffects;
public static UL CryptographicContextObject;
public static UL EditUnitFlags;
public static UL Genre;
public static UL CutPoint;
public static UL Tracks;
public static UL CopyrightStatus;
public static UL RoundingMethodCode;
public static UL KeyTimePoint;
public static UL EventAnnotationSets;
public static UL UMIDSystem1;
public static UL DigitalVideoFileFormat;
public static UL TimePeriodName1;
public static UL SubjectAbsoluteHeading;
public static UL Nationality1;
public static UL AudioSampleRate1;
public static UL CornerLatitudePoint1DecimalDegrees;
public static UL FadeInType;
public static UL AudienceShare;
public static UL ANCPacketCount;
public static UL ShotDescription;
public static UL SupportorAdministrationStatus1;
public static UL PayeeAccountNumber;
public static UL BlackReferenceLevel;
public static UL StorageKind1;
public static UL ItemDesignatorID;
public static UL FestivalName;
public static UL LinkingName1;
public static UL BuildingName;
public static UL CornerLatitudePoint1;
public static UL SubjectAbsoluteSpeed;
public static UL ApplicationName;
public static UL LocalFestivalDateTime;
public static UL MPEG7BiMDecoderInitFrameStream6;
public static UL DisplayYOffset;
public static UL CopyrightLicenseCountryCode;
public static UL PhysicalInstanceKind;
public static UL URL3;
public static UL PostalCode1;
public static UL ReleasableCountryCode;
public static UL CreationDateTime;
public static UL SupplyContractNumber;
public static UL RelatedMaterialDescription;
public static UL AuthenticationFlag;
public static UL FrameCenterLongitudeDegrees;
public static UL OpticalTestResult;
public static UL PII;
public static UL IntellectualPropertyRights1;
public static UL FirstGivenName1;
public static UL SignatureTuneFlag;
public static UL HTMLMetaDescription1;
public static UL ObjectModelVersion;
public static UL JobFunctionCode;
public static UL OrganizationalProgramNumber1;
public static UL ExposedAspectRatio;
public static UL AwardCategory1;
public static UL SettingDescription1;
public static UL TimeUnitKind;
public static UL AnamorphicLensCharacteristic;
public static UL SecurityClassification1;
public static UL ShootingCountryCode;
public static UL IntellectualPropertyDescription;
public static UL PublishingRegionName;
public static UL ContactID;
public static UL ClipCreationDateTime;
public static UL FrameCenterLatitude;
public static UL QltyCueSheet;
public static UL MPEG7BiMAccessUnitFrameStream7;
public static UL NamespaceURI1;
public static UL RelatedMaterialLocators;
public static UL DOI;
public static UL ShotList;
public static UL LocalUserDateTime;
public static UL InterpolationDefinitions;
public static UL UPID;
public static UL TimecodeStreamData;
public static UL UMIDAudio1;
public static UL SignalStandard;
public static UL FilmtoVideoTransferPhase;
public static UL NamespaceURIs;
public static UL PlatformModel;
public static UL MagneticDiskNumber;
public static UL InputSegments;
public static UL UniformDataFlag;
public static UL QltyQualityParameter1;
public static UL InsertMusicFlag;
public static UL SupplementaryOrganizationName1;
public static UL Salutation;
public static UL EventIndication1;
public static UL TripletSequenceNumber;
public static UL FieldofViewFOVVertical;
public static UL ReversedByteOrder;
public static UL PictureComponentSizing;
public static UL CurrentNumberinSequence1;
public static UL UserPosition;
public static UL DeviceUsageDescription;
public static UL DeviceDesignation;
public static UL PlaceKeyword;
public static UL VideoPayloadIdentifier;
public static UL OperationDefinitionID;
public static UL AnalogDataCodingKind;
public static UL TechnicalValue;
public static UL SeriesinaSeriesGroupCount;
public static UL LocalTargetID;
public static UL TotalLinesperFrame;
public static UL BrandOriginalTitle;
public static UL Dither;
public static UL IdentificationSets;
public static UL EssenceDescription;
public static UL PaletteLayout;
public static UL SourceContainerFormat;
public static UL FirstNumberinSequence1;
public static UL PresentationAspectRatio;
public static UL TimecodeEventEndDateTime;
public static UL UMIDSystem5;
public static UL TimecodeStartDateTime;
public static UL TaggedValueParentProperties;
public static UL ISBN;
public static UL ActiveSamplesperLine;
public static UL RegionName1;
public static UL SubjectRelativeSpeed;
public static UL FormatDescriptor1;
public static UL PlaceKeyword1;
public static UL OriginalExtendedSpokenPrimaryLanguageCode;
public static UL NITFLayerTargetID1;
public static UL TimecodeLastModificationDateTime;
public static UL VideoNoiseReductionAlgorithm;
public static UL DisplayF2Offset;
public static UL PostalTown;
public static UL PurchaserAccountName1;
public static UL NatureofPersonalityIndividualorGroup;
public static UL Weighting;
public static UL MPEG7BiMDecoderInitFrameStream5;
public static UL TelephoneNumber1;
public static UL DisplayWidth;
public static UL VBIPayloadSampleCount;
public static UL AudioSampleRate;
public static UL FaxNumber1;
public static UL StreetNumber;
public static UL ContainerLastModificationDateTime;
public static UL LocalEventEndDateTime;
public static UL FileDescriptors;
public static UL PackageUsageKind;
public static UL PublishingRegionName1;
public static UL MPEGAudioRecodingDataset;
public static UL UTCInstantDateTime;
public static UL SliceNumber;
public static UL DeviceLatitudeDegrees;
public static UL RecordingLabelName1;
public static UL PackageKLVData;
public static UL NITFLayerTargetID;
public static UL deprecatedCodecDefinition;
public static UL PositioninSequence;
public static UL TimecodeCreationDateTime;
public static UL DeviceModel;
public static UL WhiteReferenceLevel;
public static UL RIFFChunkData;
public static UL NamespacePrefixes1;
public static UL SeriesNumber;
public static UL VideoFixedBitRate;
public static UL DeviceAbsoluteSpeed;
public static UL UTCLastModificationDateTime1;
public static UL ProgrammingGroupKind1;
public static UL PlugInAPIID;
public static UL IndexByteCount;
public static UL BrandMainTitle;
public static UL UTCEndDateTime;
public static UL FormatDescriptor;
public static UL GenerationID;
public static UL EditHint;
public static UL PeakEnvelopeData;
public static UL SettingRoomNumber;
public static UL FrameworkTextLanguageCode;
public static UL AudioDeviceKind;
public static UL AlphaSampleDepth;
public static UL SecondaryTitle1;
public static UL EpisodeNumber;
public static UL ModificationDateTime;
public static UL IntegrationIndication;
public static UL TimecodeUserBitsFlag;
public static UL AIFCSummary;
public static UL ANCWrappingType;
public static UL ContentPackageIndexArray;
public static UL GeographicAreaNorthwest;
public static UL ISRC;
public static UL DataDeviceKind;
public static UL SupplierIdentificationValue;
public static UL ApplicationSupplierName1;
public static UL ProjectName1;
public static UL LocationKind1;
public static UL DateTimeDropFrameFlag;
public static UL SensorType;
public static UL PaymentsSets;
public static UL ParameterDataType;
public static UL DerivedFrom;
public static UL MaterialAbsoluteDuration;
public static UL DescriptiveMetadataFramework;
public static UL DataDeviceParameterSetting;
public static UL IBTN;
public static UL OrganizationCode1;
public static UL DialNorm;
public static UL FileSecurityWave;
public static UL ApplicationPlatform1;
public static UL RoleName;
public static UL RightsSets;
public static UL ContainerVersion;
public static UL ProgrammingGroupTitle1;
public static UL IndexingStartPosition;
public static UL MPEG7BiMDecoderInitFrameStream1;
public static UL MaterialEndTimeOffset;
public static UL LuminanceSampleRate;
public static UL Parameters;
public static UL BroadcastMediumCode;
public static UL SupportOrganizationRole1;
public static UL DefaultNamespaceURI;
public static UL Csiz;
public static UL PayerAccountName;
public static UL HTMLDOCTYPE;
public static UL GroupSynopsis;
public static UL SDKVersion;
public static UL FrameCenterLatitudeDegrees;
public static UL SampleRate;
public static UL StreamPositionIndicator3;
public static UL RIFFChunkLength;
public static UL NamespaceURIs1;
public static UL TitleKind;
public static UL FillerData;
public static UL TranscriptReference1;
public static UL VideoCodingSchemeID;
public static UL LocalCreationDateTime;
public static UL Keywords;
public static UL FieldDominance;
public static UL FormerFamilyName;
public static UL TrackName1;
public static UL TimecodeTimebase1;
public static UL FirstGivenName;
public static UL DeviceLatitude1;
public static UL TotalCurrencyAmount;
public static UL SourceValue;
public static UL MainName;
public static UL BuildingName1;
public static UL CityName1;
public static UL PrimaryOriginalLanguageCode;
public static UL KLVMetadataSequence;
public static UL PostalCode;
public static UL Theme;
public static UL UMIDVideo1;
public static UL CountryName2;
public static UL HorizontalGraphicsSafePercentage;
public static UL BroadcastRegion1;
public static UL CornerLongitudePoint1;
public static UL ProgramMaterialClassificationCode;
public static UL EMailAddress;
public static UL RoomNumber1;
public static UL BroadcastMediumKind;
public static UL KeyFrame;
public static UL ISO3166CountryCode;
public static UL CountryCodeMethod;
public static UL VideoDeviceParameterSetting;
public static UL PackageName1;
public static UL TypeDefinitionElementValueList;
public static UL MIMEEncoding;
public static UL SetElementType;
public static UL EpisodeEndNumber;
public static UL ContactsListSet;
public static UL FileSecurityReport;
public static UL UMIDData3;
public static UL DescriptiveComment1;
public static UL AvailableRepresentations;
public static UL AGICOAID;
public static UL AudienceRating;
public static UL AnnotationDescription;
public static UL SMPTE309MUserDateTime;
public static UL ClassDefinitions;
public static UL ByteOrder;
public static UL Theme1;
public static UL ColorimetryCode;
public static UL XTOsiz;
public static UL ClipID;
public static UL ParticipantOrganizationSets;
public static UL CatalogDataStatus;
public static UL StorageKindCode;
public static UL ContractType1;
public static UL TargetAudience;
public static UL BroadcastRegion;
public static UL KeyCode;
public static UL AnnotationSynopsis;
public static UL TapeStock1;
public static UL EpisodeStartNumber;
public static UL ShotComment1;
public static UL MICAlgorithm;
public static UL ReelorRollNumber;
public static UL AssociatedMetadataDefinition;
public static UL NextNumberinSequence;
public static UL FrameRate;
public static UL AstronomicalBodyName;
public static UL CopyrightLicenseRegionName;
public static UL LanguageName1;
public static UL LocationKind;
public static UL ComponentMaximumRef;
public static UL TaggedValueDefinitions;
public static UL DefaultFadeType;
public static UL StreetName1;
public static UL DeviceLongitude1;
public static UL EssenceContainers;
public static UL ReleasableCountryCode1;
public static UL Value;
public static UL TrailingLines;
public static UL PlaceName1;
public static UL BextCodingHistory1;
public static UL SettingRegionName;
public static UL MainTitle;
public static UL DefaultNamespaceURI1;
public static UL NamespacePrefix;
public static UL SourceLength;
public static UL LastNumberinSequence;
public static UL UMIDAudio5;
public static UL ObliquityAngle;
public static UL AudioCompressionAlgorithm;
public static UL Purpose;
public static UL SourceOrganization;
public static UL ObjectClass;
public static UL PackageName;
public static UL MPEG7BiMAccessUnitFrameStream4;
public static UL ColorRangeLevels;
public static UL FadeOutType;
public static UL FilmtoVideoTransferKind;
public static UL BlockStartOffset;
public static UL CryptographicContextLink;
public static UL ComponentMinimumRef;
public static UL CatalogDataStatus1;
public static UL AudioCodingSchemeID;
public static UL EventAbsoluteDuration;
public static UL FieldofViewFOVHorizontal;
public static UL JobTitle1;
public static UL FrameworkExtendedTextLanguageCode;
public static UL CBEStartOffset;
public static UL SupportOrganizationRole;
public static UL ContactDepartmentName;
public static UL MonoSourceTrackIDs;
public static UL VersionTitle1;
public static UL ObjectDescriptionCode;
public static UL TargetClassofWeakReference;
public static UL ContractLineCode;
public static UL StoredF2Offset;
public static UL ClosedGOPIndicator;
public static UL ContactDepartmentName1;
public static UL TakeNumber;
public static UL UTCStartDateTime1;
public static UL GeographicAreaSourceDatum;
public static UL KeyPointSets;
public static UL SlateInformation;
public static UL MainTitle1;
public static UL RootFormatVersion;
public static UL ScriptingLocators;
public static UL ContainerDefinitions;
public static UL FormerFamilyName1;
public static UL ComponentDataDefinition;
public static UL QltyOperatorComment1;
public static UL ProfileAndLevel;
public static UL FilmStockKind1;
public static UL ComputedKeywords;
public static UL SettingPostalCode1;
public static UL ObjectCountryCodeMethod;
public static UL PerforationsPerFrame;
public static UL UMIDSystem2;
public static UL MetadataItemName1;
public static UL ContractType;
public static UL SceneNumber;
public static UL DeclassificationDate;
public static UL ClassificationNameValueSets;
public static UL UTCStartDateTime;
public static UL DeviceXDimension;
public static UL AlternateName;
public static UL CaptureGammaEquation1;
public static UL EventEndTimecodeOffset;
public static UL StoredWidth;
public static UL MarkIn;
public static UL Rightsholder;
public static UL AnalogVideoSystemName1;
public static UL PlugInLocatorSet;
public static UL IndexDuration;
public static UL PackageMarkOutPosition;
public static UL EffectRendering;
public static UL BypassOverride;
public static UL SourceImageCenterXCoordinatePixels;
public static UL PublishingMediumName;
public static UL TapeStock;
public static UL ChannelAssignment;
public static UL PersonOrganizationSets;
public static UL PackageLastModificationDateTime;
public static UL TrackID;
public static UL MIC;
public static UL QltyEndOfModulation1;
public static UL ShotDescription1;
public static UL ComputedKeywords1;
public static UL LensAperture;
public static UL ColorPrimaries1;
public static UL FocalLength1;
public static UL MediaLocation;
public static UL VBIWrappingType;
public static UL SettingStreetName;
public static UL CornerLatitudePoint2;
public static UL IdenticalGOPIndicator;
public static UL AudienceReach;
public static UL DeviceManufacturerName1;
public static UL RightsManagementAuthority;
public static UL ElementLength;
public static UL CryptographicContextID;
public static UL CopyrightStatus1;
public static UL EnumerationUnderlyingIntegerType;
public static UL GroupSet;
public static UL SettingPeriodDescription;
public static UL HardwareAcceleratorFlag;
public static UL CountryName;
public static UL SupplementaryName;
public static UL OrganizationKind1;
public static UL SupplyingDepartmentName;
public static UL Origin;
public static UL PublicationSets;
public static UL OpticalTestParameterName;
public static UL HonorsandQualifications1;
public static UL WorkingTitle1;
public static UL ContiguousDataFlag;
public static UL VersionTitle;
public static UL MPEG7BiMAccessUnitFrameStream8;
public static UL ShootingRegionName;
public static UL PropertyType;
public static UL SupplierIdentificationKind;
public static UL LocalTargetID1;
public static UL TapeFormat;
public static UL XMLDocumentText;
public static UL SensorRollAngle;
public static UL ProgramKind;
public static UL ContextDescription;
public static UL GlobalNumber;
public static UL SettingStateorProvinceorCountyName;
public static UL CornerLatitudePoint4DecimalDegrees;
public static UL Size;
public static UL ComponentsinSequence;
public static UL ThesaurusName1;
public static UL ContractTypeCode;
public static UL SourceIndex;
public static UL RoundedTimecodeTimebase;
public static UL ImageStartOffset;
public static UL TitleKind1;
public static UL EnhancementorModificationDescription;
public static UL Interpolation;
public static UL PackageAttributes;
public static UL SettingPostalCode;
public static UL Nationality;
public static UL ISO6391LanguageCode1;
public static UL EventTrackEditRate;
public static UL ColorSiting;
public static UL AwardParticipantSets;
public static UL ObjectCountryCode;
public static UL OpticalTrack;
public static UL QltyCueSheet1;
public static UL SingleSequenceFlag;
public static UL AwardName1;
public static UL FilmBatchNumber;
public static UL QltyQualityEvent1;
public static UL OriginCode;
public static UL DeviceRelativePositionalAccuracy;
public static UL SensorTypeCode;
public static UL WorkinProgressFlag;
public static UL MinimumSupportedEngineVersion;
public static UL KeypointKind;
public static UL ShotCommentKind;
public static UL SubjectName;
public static UL SupplementaryOrganizationName;
public static UL DataEnhancementorModificationDescription;
public static UL ScanningDirection;
public static UL PositionTableIndexing;
public static UL SubjectRelativePositionalAccuracy;
public static UL EncryptedTrackFileID;
public static UL TrafficID;
public static UL SecondaryOriginalLanguageCode;
public static UL ColorDescriptor;
public static UL ImageCategory;
public static UL ScramblingKeyKind;
public static UL CueInWords1;
public static UL DisplayXOffset;
public static UL TransferFilmFrameRate;
public static UL OffsettoIndexTable;
public static UL SliceCount;
public static UL ChannelID;
public static UL ApplicationProductID;
public static UL PeakFrameCount;
public static UL IntegrationIndication1;
public static UL SamplingHierarchyCode;
public static UL ElementCount;
public static UL LocalEventStartDateTime1;
public static UL ThemeMusicFlag;
public static UL EdgeCodeStart;
public static UL StreamPositionIndicator2;
public static UL ObjectName;
public static UL Segment;
public static UL FilteringCode;
public static UL PeakEnvelopeTimestamp;
public static UL OrganizationID;
public static UL MissionID;
public static UL MPEG7BiMDecoderInitFrameStream4;
public static UL FrameCode;
public static UL ClipShotSets;
public static UL BeginAnchor1;
public static UL CityName;
public static UL GeographicLocation;
public static UL DateTimeRate;
public static UL TransportStreamID;
public static UL LanguageName;
public static UL Jurisdiction;
public static UL EventAbsoluteDurationFrameCount;
public static UL AnnotationSynopsis1;
public static UL StringElementType;
public static UL InstallmentNumber;
public static UL DeviceLongitude;
public static UL AnnotationKind1;
public static UL VideoLineMap;
public static UL AudioStereoChannelCount;
public static UL SupportorAdministrationStatus;
public static UL ManufacturerInformationObject;
public static UL AssetValue;
public static UL BeginAnchor;
public static UL VerticalDatum;
public static UL Packages;
public static UL SensorMode;
public static UL FrameCenterLongitude;
public static UL IncludeSync;
public static UL IsSigned;
public static UL ObjectHorizontalAverageDimension;
public static UL VideoClipDuration;
public static UL ProjectNumber;
public static UL CaptionKind;
public static UL FamilyName;
public static UL AngularUnitKind;
public static UL StreamID;
public static UL deprecatedDefinedName;
public static UL SourcePackageID;
public static UL NMEA0183GPSDocumentText;
public static UL DefinitionObjectName1;
public static UL VideoTestParameter;
public static UL PurchaserIdentificationValue;
public static UL ShotDuration;
public static UL SettingCountryCode;
public static UL VideoColorKind;
public static UL StreetName;
public static UL CornerLatitudePoint3DecimalDegrees;
public static UL URL2;
public static UL TapePartitionCapacity;
public static UL PurchaserAccountName;
public static UL StoredANCLineNumber;
public static UL PackageMarkInPosition;
public static UL ProgramNumber;
public static UL BitsPerAudioSample;
public static UL RP217VideoStreamPID;
public static UL LengthUnitKind;
public static UL JPEGTableID;
public static UL ProgramSupportMaterialReference;
public static UL MinorVersion;
public static UL LogoFlag;
public static UL SideNumber;
public static UL FixedUserData;
public static UL TimecodeKind;
public static UL MetadataEncodingSchemeCode;
public static UL YTOsiz;
public static UL ANCPayloadSampleCount;
public static UL DeviceRelativePositionX;
public static UL RestrictionsonUse;
public static UL FrameLayout;
public static UL FilmStockManufacturerName1;
public static UL CopyrightOwnerName;
public static UL EpisodeNumber1;
public static UL SourceImageCenterYCoordinatePixels;
public static UL DisplayUnits;
public static UL KLVDataDefinitions;
public static UL ClassifyingCountryCode;
public static UL AudioEnhancementorModificationDescription;
public static UL Dictionary;
public static UL ISO639TextLanguageCode;
public static UL SubtitleDatafileFlag;
public static UL SubjectDistance;
public static UL VersionNumberString;
public static UL FieldFrameTypeCode;
public static UL MIMECharSet1;
public static UL UMIDVideo2;
public static UL CurrencyCode;
public static UL TerminatingFillerData;
public static UL ObjectVerticalAverageDimension;
public static UL BitRate;
public static UL TapeShellKind;
public static UL MetadataServerLocators;
public static UL AudioFirstMixDownProcess;
public static UL EssenceLocators;
public static UL BufferDelay;
public static UL EMailAddress1;
public static UL ToolkitVersion;
public static UL PeakEnvelopeVersion;
public static UL UMIDData2;
public static UL IntellectualPropertyLicenseCountryCode;
public static UL FrameCenterLongitude1;
public static UL DataDefinitions;
public static UL CornerLongitudePoint2DecimalDegrees;
public static UL EssenceStreamID;
public static UL ComputedStratumKind;
public static UL ImageEndOffset;
public static UL RoundingLaw;
public static UL FirstNumberinSequence;
public static UL DigitalEncodingBitRate;
public static UL ItemValue1;
public static UL CueOutWords1;
public static UL DeviceRelativeHeading;
public static UL OtherGivenNames1;
public static UL FilmBatchNumber1;
public static UL SplicingMetadata;
public static UL DictionaryIdentifier;
public static UL PrimaryExtendedSpokenLanguageCode;
public static UL UTCEventEndDateTime1;
public static UL ApplicationVersionNumber;
public static UL CountryName3;
public static UL NameSuffix;
public static UL SceneShotSets;
public static UL PeakEnvelopeFormat;
public static UL PersonSets;
public static UL PhysicalMediaLength;
public static UL deprecatedAAFManufacturerID;
public static UL SamplingStructureCode;
public static UL DescriptiveComment;
public static UL ExtendedCaptionsLanguageCode;
public static UL PurchaserAccountNumber;
public static UL AngletoNorth;
public static UL EdgeCode;
public static UL LocalFilePath;
public static UL IntellectualPropertyLicenseRegionCode;
public static UL DropFrame;
public static UL AudioAverageBitRate;
public static UL EssenceData;
public static UL ColorPrimaries;
public static UL BextCodingHistory;
public static UL Rightsholder1;
public static UL OrganizationalProgramNumber;
public static UL ContentPackageMetadataLink;
public static UL CornerLongitudePoint2;
public static UL ContractLineName1;
public static UL HistoricalValue;
public static UL GraphicUsageKind;
public static UL DefaultFadeDuration;
public static UL SettingDescription;
public static UL MPEGAudioBitRate;
public static UL RightsComment1;
public static UL TimecodeSourceKind;
public static UL LeadingLines;
public static UL BitsperPixel1;
public static UL ParameterDefinitions;
public static UL AudioMonoChannelCount;
public static UL PlugInDefinitions;
public static UL deprecatedDescriptiveMetadataSets;
public static UL TemporalOffset;
public static UL UMIDAudio4;
public static UL FilmTestParameter;
public static UL ChannelIDs;
public static UL SettingCityName1;
public static UL ViewportAspectRatio;
public static UL VideoandFilmFrameRelationship;
public static UL GeographicPolygonSourceDatum;
public static UL ObjectKind;
public static UL ImageCoordinateSystem;
public static UL PlatformDesignation1;
public static UL CornerLongitudePoint4DecimalDegrees;
public static UL RoleName1;
public static UL Genre1;
public static UL PayeeAccountName;
public static UL TextualDescriptionKind;
public static UL ComputedKeyFrames;
public static UL DigitalorAnalogOrigination;
public static UL DeviceSerialNumber;
public static UL Emphasis;
public static UL DiscPartitionCapacity;
public static UL ISRN;
public static UL GUID;
public static UL EventIndication;
public static UL ContractTermsofBusiness;
public static UL AudioCodingSchemeCode;
public static UL BlockAlign;
public static UL DeviceLongitudeDegrees;
public static UL EventSets;
public static UL SupplementaryName1;
public static UL DeviceUsageDescription1;
public static UL PulldownSequence;
public static UL EssenceContainerFormat;
public static UL ImageFormatSet;
public static UL TapeShellKind1;
public static UL StateorProvinceorCountyName1;
public static UL KeypointValue;
public static UL ComponentUserComments;
public static UL PositionWithinViewportImageXCoordinatePixels;
public static UL ANCPayloadSampleCoding;
public static UL CodedContentScanningKind;
public static UL UMIDVideo3;
public static UL ComputedObjectKind1;
public static UL PolarCharacteristic;
public static UL HorizontalDatum;
public static UL OrganizationMainName1;
public static UL UTCInstantDateTime1;
public static UL CodecEssenceDescriptor;
public static UL PerceivedDisplayFormatName;
public static UL ShootingRegionCode;
public static UL ProductionSettingPeriodSets;
public static UL SignaltoNoiseRatio;
public static UL ISMN;
public static UL deprecatedEssenceContainerFormat;
public static UL InputSegmentCount;
public static UL PreviousRepeatNumber;
public static UL SoftwareOnlySupportFlag;
public static UL QltyQualityEvent;
public static UL ElectrospatialFormulation;
public static UL ProjectSet;
public static UL PostalTown1;
public static UL PreviousNumberinSequence;
public static UL VariableArrayElementType;
public static UL XMLDocumentText1;
public static UL RecordedFormat;
public static UL AddressLine;
public static UL GraphicKind;
public static UL RightsManagementAuthority1;
public static UL GeographicalCoordinates;
public static UL IsSearchable;
public static UL ElementNameList;
public static UL QltyOperatorComment;
public static UL AnnotationParticipantSets;
public static UL UseDefaultValue;
public static UL FirstBroadcastFlag;
public static UL RightsConditionDescription1;
public static UL SampledXOffset;
public static UL TimecodeModificationDateTime;
public static UL UMIDAudio3;
public static UL DefaultFadeEditRate;
public static UL ActiveState;
public static UL FilmTestResult1;
public static UL SecurityClassificationCaveats;
public static UL EventStart;
public static UL DefaultDataValue;
public static UL IntellectualPropertyRights;
public static UL PackageUserComments;
public static UL KLVDataValue;
public static UL BroadcastChannel;
public static UL ToleranceInterpolationMethod;
public static UL CaptionKind1;
public static UL InkNumber;
public static UL PeakChannelCount;
public static UL DynamicSourceTrackIDs;
public static UL StartTimecodeRelativetoReference;
public static UL DeviceParametersSets;
public static UL ISO639CaptionsLanguageCode;
public static UL PublishingOrganizationName;
public static UL OrganizationIDKind1;
public static UL PlatformHeadingAngle;
public static UL MaximumBPictureCount;
public static UL SourceSpecies;
public static UL DeviceRelativeSpeed;
public static UL BrandMainTitle1;
public static UL CueInWords;
public static UL ClosedCaptionSubtitlesFlag;
public static UL UpstreamAudioCompressionAlgorithm;
public static UL LinkedGenerationID;
public static UL SensorSize;
public static UL UMIDSystem3;
public static UL VBIPayloadSampleCoding;
public static UL Bypass;
public static UL SettingTownName1;
public static UL GraphicUsageKind1;
public static UL DeviceYDimension;
public static UL RoomorSuiteName1;
public static UL FaxNumber;
public static UL StorageKind;
public static UL IsOptional;
public static UL ObjectRegionCode;
public static UL MPEG7BiMDecoderInitFrameStream8;
public static UL URL1;
public static UL JobFunctionName;
public static UL ClassificationandMarkingSystem;
public static UL DefinitionObjectName;
public static UL MagneticTrack;
public static UL DeviceManufacturerName;
public static UL IEEEDeviceID;
public static UL QltyStartOfModulation;
public static UL JFIFMarkerDescription1;
public static UL Ysiz;
public static UL EventElapsedTimetoEnd;
public static UL MemberTypes;
public static UL ApplicationVersionString;
public static UL DynamicSourcePackageID;
public static UL ComponentAttributes;
public static UL URN;
public static UL JFIFMarkerDescription;
public static UL AnchorOffset;
public static UL ShotComment;
public static UL Xsiz;
public static UL OperatingSystemInterpretations;
public static UL CatalogPrefixNumber;
public static UL RecordingLabelName;
public static UL XTsiz;
public static UL VideoTestResult;
public static UL StreamOffset;
public static UL MPEG7BiMAccessUnitFrameStream5;
public static UL AssignedCategoryValue;
public static UL EssenceLength;
public static UL AnalogMonitoringandControlCodingKind;
public static UL HTMLMetaDescription;
public static UL CopyCount;
public static UL ContactKind1;
public static UL ProductionOrganizationRole;
public static UL PresentationGammaEquation;
public static UL ExtendibleElementNameList;
public static UL RoyaltyIncomeInformation;
public static UL KeyFrameSampleCount;
public static UL OrganizationCode;
public static UL ToleranceMode;
public static UL PulldownFieldDominance;
public static UL ScriptingSets;
public static UL AudioNoiseReductionAlgorithm;
public static UL Subdescriptors;
public static UL ArchiveID;
public static UL AlphaMaximumRef;
public static UL StreamPositionIndicator1;
public static UL PhysicalMediaLocation;
public static UL DisplayHeight;
public static UL IsUniqueIdentifier;
public static UL ViewportImageCenterCCoordinatePixels;
public static UL BackgroundMusicFlag;
public static UL OrganizationID1;
public static UL OpticalTestResult1;
public static UL ImageSourceDeviceKind;
public static UL LayerNumber;
public static UL ExtendedTextLanguageCode;
public static UL AICI;
public static UL MPEGVideoRecodingDataset;
public static UL ObjectAreaDimension;
public static UL SampledYOffset;
public static UL IntellectualPropertyDescription1;
public static UL TextualDescriptionKind1;
public static UL ItemID;
public static UL OperationCategory;
public static UL MetadataItemName;
public static UL CaptureFilmFrameRate;
public static UL Selected;
public static UL NominationCategory;
public static UL AudioReferenceLevel;
public static UL LocalDatumAbsolutePositionAccuracy;
public static UL MPEG7BiMDecoderInitFrameStream3;
public static UL RelativePositioninSequenceName;
public static UL BrandingSets;
public static UL OriginalTitle1;
public static UL EditingEventComment;
public static UL DeviceKind1;
public static UL SettingStreetNumberorBuildingName1;
public static UL CurrentRepeatNumber;
public static UL EndAnchor1;
public static UL PointsPerPeakValue;
public static UL VideoAverageBitRate;
public static UL RoomorSuiteName;
public static UL MissionID1;
public static UL IndexEditRate;
public static UL FilmStockManufacturerName;
public static UL QltyBasicData1;
public static UL Abstract;
public static UL YTsiz;
public static UL SettingRegionCode;
public static UL HeaderByteCount;
public static UL CollectionName1;
public static UL DeviceIDKind;
public static UL LocalTagValue;
public static UL Description;
public static UL EdgeCodeFilmGauge;
public static UL BitsPerSample;
public static UL ClassifiedBy;
public static UL ANCPayloadByteArray;
public static UL AssignedCategoryName;
public static UL RecordedTrackNumber;
public static UL FieldRate;
public static UL ISSN;
public static UL ProcessingSet;
public static UL VideoIndexArray;
public static UL CodingStyleDefault;
public static UL ControlPointList;
public static UL TelephoneNumber;
public static UL SampledHeight;
public static UL TimecodeEndDateTime;
public static UL DeviceParameterNameValueSets;
public static UL StreamData;
public static UL LineNumber;
public static UL POSIXMicroseconds;
public static UL EpisodicItemSets;
public static UL DataDeviceParameterName;
public static UL SICI;
public static UL StartTimecode;
public static UL TIFFSummary;
public static UL SettingCityName;
public static UL SceneNumber1;
public static UL AnalogSystem;
public static UL MaximumSupportedPlatformVersion;
public static UL FrameworkTitle1;
public static UL MicrophonePlacementTechniques;
public static UL ProductFormat;
public static UL ItemName;
public static UL NominationCategory1;
public static UL DescriptionKind;
public static UL BroadcastOrganizationName;
public static UL TapeBatchNumber;
public static UL PlatformSerialNumber;
public static UL VBEEndOffset;
public static UL RelatedMaterialDescription1;
public static UL PackageTracks;
public static UL PublishingOrganizationName1;
public static UL FadeOutDuration;
public static UL StratumKind;
public static UL SalesContractNumber;
public static UL UMIDSystem;
public static UL Purpose1;
public static UL DisplayUnits1;
public static UL RenamedType;
public static UL FixedChannelStatusData;
public static UL Salutation1;
public static UL FilmGauge;
public static UL BICI;
public static UL AudioDeviceParameter;
public static UL OpticalDiscNumber;
public static UL IdentifierKind;
public static UL CaptureAspectRatio;
public static UL PlaceName;
public static UL GeographicPolygonCoordinates;
public static UL CornerLatitudePoint2DecimalDegrees;
public static UL CornerLatitudePoint3;
public static UL DeviceRelativePositionY;
public static UL TimeSystemOffset;
public static UL MainName1;
public static UL PerforationsPerFrame1;
public static UL CulturalValue;
public static UL PackageID;
public static UL ParticipantID;
public static UL ISTC;
public static UL SecondaryOriginalExtendedSpokenLanguageCode;
public static UL AudioCodingSchemeName;
public static UL deprecatedDataDefinition;
public static UL LocalEventStartDateTime;
public static UL RelativePositioninSequenceOffset;
public static UL MIMEMediaType1;
public static UL KeyFrames;
public static UL CaptureGammaEquation;
public static UL MobileTelephoneNumber;
public static UL EdgeCodeFormat;
public static UL PersonDescription;
public static UL UMIDData1;
public static UL ISAN;
public static UL NonUSClassifyingCountryCode;
public static UL RootObjectDirectory;
public static UL OperationParameters;
public static UL PayerAccountSortCode;
public static UL DeviceKind;
public static UL StateorProvinceorCountyName;
public static UL ScriptingText;
public static UL AwardSets;
public static UL QltyEndOfModulation;
public static UL ClassificationReason;
public static UL LUID;
public static UL FieldofViewFOVHorizontal1;
public static UL FramePositionalAccuracy;
public static UL DateTimeEmbeddedFlag;
public static UL AudienceAppreciation;
public static UL ComputedKeyData;
public static UL RelativeScope;
public static UL PayeeAccountSortCode;
public static UL CueOutWords;
public static UL CornerLongitudePoint3DecimalDegrees;
public static UL TotalEpisodeCount;
public static UL ViewportHeight;
public static UL OrganizationIDKind;
public static UL ShotParticipantRoleSets;
public static UL Properties;
public static UL ParameterDefinition;
public static UL HorizontalSubsampling;
public static UL ContractSets;
public static UL UserDataMode;
public static UL MinimumAPIVersion;
public static UL ApproximateImageContainerSize;
public static UL BoundingRectangle;
public static UL ObjectRegionName;
public static UL LockedIndicator;
public static UL LinkingName;
public static UL SimpleFlaggingCount;
public static UL AnnotationKind;
public static UL PeakEnvelope;
public static UL VideoorImageCompressionAlgorithm;
public static UL AnalogVideoSystemName;
public static UL FadeInDuration;
public static UL ThirdGivenName1;
public static UL CaptionsDescriptionParticipantSets;
public static UL MaximumGOPSize;
public static UL EssenceIsIdentified;
public static UL TimingBiasCorrection;
public static UL PaymentDueDateTime;
public static UL ApplicationSupplierName;
public static UL ItemValue;
public static UL TapeBatchNumber1;
public static UL AssignedCategoryName1;
public static UL ContactNameValueSets;
public static UL AnnotationDescription1;
public static UL CryptographicKeyID;
public static UL AlphaTransparency;
public static UL PackLength;
public static UL BroadcastServiceName;
public static UL DigitalMetadataCarrier;
public static UL TapeCapacity;
public static UL KeyDataorProgram;
public static UL CentralTelephoneNumber;
public static UL ProductionScriptReference1;
public static UL ISBD;
public static UL CornerLongitudePoint3;
public static UL LocalLastModificationDateTime;
public static UL CurrentNumberinSequence;
public static UL ManufacturerID;
public static UL GeographicAreaSoutheast;
static void init() {
init1();
init2();
init3();
}
}
