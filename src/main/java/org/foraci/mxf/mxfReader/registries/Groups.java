package org.foraci.mxf.mxfReader.registries;

import org.foraci.mxf.mxfReader.UL;
import org.foraci.mxf.mxfReader.PartitionPackUL;
import org.foraci.mxf.mxfReader.GroupUL;
import org.foraci.mxf.mxfReader.parsers.Parser;
import org.foraci.mxf.mxfReader.parsers.PrimerPackParser;
import org.foraci.mxf.mxfReader.parsers.RandomIndexPackParser;

/**
 * Temporarily here to hold and groups defs for the MXF spec
 * @author jforaci
 */
public class Groups {
    public static UL PrimerPack, RandomIndexPack, IndexTableSegment;
    // metadata sets
    public static UL Preface, Identification, ContentStorage, EssenceContainerData,
            MaterialPackage, SourcePackage, TimelineTrack, EventTrack, StaticTrack,
            Sequence, SourceClip, TimecodeComponent, DMSegment, DMSourceClip,
            FileDescriptor, GenericPictureEssenceDescriptor, CDCIEssenceDescriptor,
            RGBAEssenceDescriptor, GenericSoundEssenceDescriptor, GenericDataEssenceDescriptor,
            MultipleDescriptor, Aes3Descriptor, WaveAudioEssenceDescriptor, WaveAudioPhysicalDescriptor,
            WaveUnknownChunkSet, Mpeg2VideoDescriptor, Jpeg2kSubDescriptor, AncPacketsDescriptor, VbiDataDescriptor,
            NetworkLocator, TextLocator;
    static void init() {
        Registry.addPartial(new PartitionPackUL());
        PrimerPack = Registry.add(new UL("PrimerPack", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x05,0x01,0x01,0x0d,0x01,0x02,0x01,0x01,0x05,0x01,0x00,}, PrimerPackParser.class));
        RandomIndexPack = Registry.add(GroupUL.match("RandomIndexPack", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x05,0x01,0x01,0x0d,0x01,0x02,0x01,0x01,0x11,0x01,0x00,}));
        RandomIndexPack.setParserClass(RandomIndexPackParser.class);
        IndexTableSegment = Registry.add(GroupUL.match("IndexTableSegment", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x02,0x01,0x01,0x10,0x01,0x00}));
        IndexTableSegment.setParserClass(Parser.class);
        // metadata sets
        Preface = Registry.add(GroupUL.match("Preface", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x2F,0x00,}));
        Identification = Registry.add(GroupUL.match("Identification", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x30,0x00,}));
        ContentStorage = Registry.add(GroupUL.match("ContentStorage", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x18,0x00,}));
        EssenceContainerData = Registry.add(GroupUL.match("EssenceContainerData", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x23,0x00,}));
        MaterialPackage = Registry.add(GroupUL.match("MaterialPackage", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x36,0x00,}));
        SourcePackage = Registry.add(GroupUL.match("SourcePackage", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x37,0x00,}));
        TimelineTrack = Registry.add(GroupUL.match("TimelineTrack", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x3B,0x00,}));
        EventTrack = Registry.add(GroupUL.match("EventTrack", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x39,0x00,}));
        StaticTrack = Registry.add(GroupUL.match("StaticTrack", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x3A,0x00,}));
        Sequence = Registry.add(GroupUL.match("Sequence", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x0F,0x00,}));
        SourceClip = Registry.add(GroupUL.match("SourceClip", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x11,0x00,}));
        TimecodeComponent = Registry.add(GroupUL.match("TimecodeComponent", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x14,0x00,}));
        DMSegment = Registry.add(GroupUL.match("DMSegment", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x41,0x00,}));
        DMSourceClip = Registry.add(GroupUL.match("DMSourceClip", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x45,0x00,}));
        FileDescriptor = Registry.add(GroupUL.match("FileDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x25,0x00,}));
        GenericPictureEssenceDescriptor = Registry.add(GroupUL.match("GenericPictureEssenceDescriptor", new byte[] {0x06,0x0A,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x27,0x00,}));
        CDCIEssenceDescriptor = Registry.add(GroupUL.match("CDCIEssenceDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x28,0x00,}));
        RGBAEssenceDescriptor = Registry.add(GroupUL.match("RGBAEssenceDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x29,0x00,}));
        GenericSoundEssenceDescriptor = Registry.add(GroupUL.match("GenericSoundEssenceDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x42,0x00,}));
        GenericDataEssenceDescriptor = Registry.add(GroupUL.match("GenericDataEssenceDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x43,0x00,}));
        MultipleDescriptor = Registry.add(GroupUL.match("MultipleDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x44,0x00,}));
        Aes3Descriptor = Registry.add(GroupUL.match("Aes3Descriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x47,0x00,}));
        WaveAudioEssenceDescriptor = Registry.add(GroupUL.match("WaveAudioEssenceDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x48,0x00,}));
        WaveAudioPhysicalDescriptor = Registry.add(GroupUL.match("WaveAudioPhysicalDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x50,0x00,}));
        WaveUnknownChunkSet = Registry.add(GroupUL.match("WaveUnknownChunkSet", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x4F,0x00,}));
        Mpeg2VideoDescriptor = Registry.add(GroupUL.match("Mpeg2VideoDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x51,0x00,}));
        Jpeg2kSubDescriptor = Registry.add(GroupUL.match("Jpeg2kSubDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x5A,0x00,}));
        AncPacketsDescriptor = Registry.add(GroupUL.match("AncPacketsDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x5C,0x00,}));
        VbiDataDescriptor = Registry.add(GroupUL.match("VbiDataDescriptor", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x5B,0x00,}));
        NetworkLocator = Registry.add(GroupUL.match("NetworkLocator", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x32,0x00,}));
        TextLocator = Registry.add(GroupUL.match("TextLocator", new byte[] {0x06,0x0E,0x2B,0x34,0x02,0x53,0x01,0x01,0x0d,0x01,0x01,0x01,0x01,0x01,0x33,0x00,}));
    }
}
